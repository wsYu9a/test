package kotlin.collections;

import androidx.exifinterface.media.ExifInterface;
import com.baidu.mobads.sdk.internal.a;
import com.cdo.oaps.ad.OapsKey;
import com.kwad.sdk.api.model.AdnName;
import f.b.a.d;
import f.b.a.e;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.RandomAccess;
import java.util.Set;
import kotlin.ExperimentalStdlibApi;
import kotlin.Metadata;
import kotlin.Pair;
import kotlin.SinceKotlin;
import kotlin.TuplesKt;
import kotlin.TypeCastException;
import kotlin.Unit;
import kotlin.comparisons.ComparisonsKt__ComparisonsKt;
import kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareBy$2;
import kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareByDescending$1;
import kotlin.internal.HidesMembers;
import kotlin.internal.InlineOnly;
import kotlin.internal.PlatformImplementationsKt;
import kotlin.jvm.JvmName;
import kotlin.jvm.functions.Function0;
import kotlin.jvm.functions.Function1;
import kotlin.jvm.functions.Function2;
import kotlin.jvm.functions.Function3;
import kotlin.jvm.internal.DoubleCompanionObject;
import kotlin.jvm.internal.Intrinsics;
import kotlin.random.Random;
import kotlin.ranges.IntRange;
import kotlin.ranges.RangesKt___RangesKt;
import kotlin.sequences.Sequence;
import kotlin.sequences.SequencesKt___SequencesKt;
import kotlin.text.StringsKt__AppendableKt;

@Metadata(bv = {1, 0, 3}, d1 = {"\u0000Ô\u0002\n\u0000\n\u0002\u0010 \n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\u0010\u001c\n\u0000\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0019\n\u0002\u0010\u001e\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u000e\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u001f\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u0000\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\t\n\u0002\u0010\u000f\n\u0002\u0010!\n\u0000\n\u0002\u0010\u0002\n\u0002\b\t\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u0018\n\u0002\b\u0002\n\u0002\u0010\u0005\n\u0002\u0010\u0012\n\u0002\b\u0002\n\u0002\u0010\f\n\u0002\u0010\u0019\n\u0002\b\u0002\n\u0002\u0010\u0006\n\u0002\u0010\u0013\n\u0002\b\u0002\n\u0002\u0010\u0007\n\u0002\u0010\u0014\n\u0002\b\u0002\n\u0002\u0010\u0015\n\u0002\b\u0002\n\u0002\u0010\t\n\u0002\u0010\u0016\n\u0002\b\u0002\n\u0002\u0010\n\n\u0002\u0010\u0017\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\b\u0006\n\u0002\u0010%\n\u0002\b\t\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\"\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\b\n\n\u0002\u0018\u0002\n\u0002\b\b\n\u0002\u0010#\n\u0002\b\u000e\n\u0002\u0018\u0002\n\u0002\b4\n\u0002\u0010\u0011\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0015\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\r\n\u0002\b\u0007\n\u0002\u0010\u000e\n\u0002\b\u0017\u001a \u0010\u0002\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001H\u0087\n¢\u0006\u0004\b\u0002\u0010\u0003\u001a \u0010\u0004\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001H\u0087\n¢\u0006\u0004\b\u0004\u0010\u0003\u001a \u0010\u0005\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001H\u0087\n¢\u0006\u0004\b\u0005\u0010\u0003\u001a \u0010\u0006\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001H\u0087\n¢\u0006\u0004\b\u0006\u0010\u0003\u001a \u0010\u0007\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001H\u0087\n¢\u0006\u0004\b\u0007\u0010\u0003\u001a-\u0010\f\u001a\u00020\u000b\"\t\b\u0000\u0010\u0000¢\u0006\u0002\b\b*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010\n\u001a\u00028\u0000H\u0086\u0002¢\u0006\u0004\b\f\u0010\r\u001a%\u0010\u0010\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010\u000f\u001a\u00020\u000e¢\u0006\u0004\b\u0010\u0010\u0011\u001a(\u0010\u0010\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010\u000f\u001a\u00020\u000eH\u0087\b¢\u0006\u0004\b\u0010\u0010\u0012\u001a9\u0010\u0015\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010\u000f\u001a\u00020\u000e2\u0012\u0010\u0014\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00028\u00000\u0013¢\u0006\u0004\b\u0015\u0010\u0016\u001a<\u0010\u0015\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010\u000f\u001a\u00020\u000e2\u0012\u0010\u0014\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00028\u00000\u0013H\u0087\b¢\u0006\u0004\b\u0015\u0010\u0017\u001a'\u0010\u0018\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010\u000f\u001a\u00020\u000e¢\u0006\u0004\b\u0018\u0010\u0011\u001a*\u0010\u0018\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010\u000f\u001a\u00020\u000eH\u0087\b¢\u0006\u0004\b\u0018\u0010\u0012\u001a6\u0010\u001a\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0087\b¢\u0006\u0004\b\u001a\u0010\u001b\u001a6\u0010\u001c\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0087\b¢\u0006\u0004\b\u001c\u0010\u001b\u001a6\u0010\u001c\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0087\b¢\u0006\u0004\b\u001c\u0010\u001d\u001a\u001d\u0010\u001e\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t¢\u0006\u0004\b\u001e\u0010\u001f\u001a\u001d\u0010\u001e\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001¢\u0006\u0004\b\u001e\u0010\u0003\u001a4\u0010\u001e\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b¢\u0006\u0004\b\u001e\u0010\u001b\u001a\u001f\u0010 \u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t¢\u0006\u0004\b \u0010\u001f\u001a\u001f\u0010 \u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001¢\u0006\u0004\b \u0010\u0003\u001a6\u0010 \u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b¢\u0006\u0004\b \u0010\u001b\u001a<\u0010!\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010\u000f\u001a\u00020\u000e2\u0012\u0010\u0014\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00028\u00000\u0013H\u0087\b¢\u0006\u0004\b!\u0010\u0017\u001a'\u0010\"\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010\u000f\u001a\u00020\u000e¢\u0006\u0004\b\"\u0010\u0012\u001a*\u0010#\u001a\u00020\u000e\"\t\b\u0000\u0010\u0000¢\u0006\u0002\b\b*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010\n\u001a\u00028\u0000¢\u0006\u0004\b#\u0010$\u001a*\u0010#\u001a\u00020\u000e\"\t\b\u0000\u0010\u0000¢\u0006\u0002\b\b*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010\n\u001a\u00028\u0000¢\u0006\u0004\b#\u0010%\u001a4\u0010&\u001a\u00020\u000e\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b¢\u0006\u0004\b&\u0010'\u001a4\u0010&\u001a\u00020\u000e\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b¢\u0006\u0004\b&\u0010(\u001a4\u0010)\u001a\u00020\u000e\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b¢\u0006\u0004\b)\u0010'\u001a4\u0010)\u001a\u00020\u000e\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b¢\u0006\u0004\b)\u0010(\u001a\u001d\u0010*\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t¢\u0006\u0004\b*\u0010\u001f\u001a\u001d\u0010*\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001¢\u0006\u0004\b*\u0010\u0003\u001a4\u0010*\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b¢\u0006\u0004\b*\u0010\u001b\u001a4\u0010*\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b¢\u0006\u0004\b*\u0010\u001d\u001a*\u0010+\u001a\u00020\u000e\"\t\b\u0000\u0010\u0000¢\u0006\u0002\b\b*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010\n\u001a\u00028\u0000¢\u0006\u0004\b+\u0010$\u001a*\u0010+\u001a\u00020\u000e\"\t\b\u0000\u0010\u0000¢\u0006\u0002\b\b*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010\n\u001a\u00028\u0000¢\u0006\u0004\b+\u0010%\u001a\u001f\u0010,\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t¢\u0006\u0004\b,\u0010\u001f\u001a\u001f\u0010,\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001¢\u0006\u0004\b,\u0010\u0003\u001a6\u0010,\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b¢\u0006\u0004\b,\u0010\u001b\u001a6\u0010,\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b¢\u0006\u0004\b,\u0010\u001d\u001a \u0010.\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000-H\u0087\b¢\u0006\u0004\b.\u0010/\u001a'\u0010.\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000-2\u0006\u0010.\u001a\u000200H\u0007¢\u0006\u0004\b.\u00101\u001a\"\u00102\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000-H\u0087\b¢\u0006\u0004\b2\u0010/\u001a)\u00102\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000-2\u0006\u0010.\u001a\u000200H\u0007¢\u0006\u0004\b2\u00101\u001a\u001d\u00103\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t¢\u0006\u0004\b3\u0010\u001f\u001a\u001d\u00103\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001¢\u0006\u0004\b3\u0010\u0003\u001a4\u00103\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b¢\u0006\u0004\b3\u0010\u001b\u001a\u001f\u00104\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t¢\u0006\u0004\b4\u0010\u001f\u001a\u001f\u00104\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001¢\u0006\u0004\b4\u0010\u0003\u001a6\u00104\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b¢\u0006\u0004\b4\u0010\u001b\u001a+\u00106\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u00105\u001a\u00020\u000e¢\u0006\u0004\b6\u00107\u001a+\u00108\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u00105\u001a\u00020\u000e¢\u0006\u0004\b8\u00109\u001a:\u0010:\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b¢\u0006\u0004\b:\u0010;\u001a:\u0010<\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b¢\u0006\u0004\b<\u0010=\u001a:\u0010>\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b¢\u0006\u0004\b>\u0010=\u001aO\u0010B\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2'\u0010\u0019\u001a#\u0012\u0013\u0012\u00110\u000e¢\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0?H\u0086\b¢\u0006\u0004\bB\u0010C\u001ac\u0010G\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u0010\b\u0001\u0010E*\n\u0012\u0006\b\u0000\u0012\u00028\u00000D*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010F\u001a\u00028\u00012'\u0010\u0019\u001a#\u0012\u0013\u0012\u00110\u000e¢\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0?H\u0086\b¢\u0006\u0004\bG\u0010H\u001a+\u0010K\u001a\r\u0012\t\u0012\u00078\u0000¢\u0006\u0002\bJ0\u0001\"\u0006\b\u0000\u0010I\u0018\u0001*\u0006\u0012\u0002\b\u00030\tH\u0086\b¢\u0006\u0004\bK\u0010L\u001a:\u0010M\u001a\u00028\u0001\"\u0006\b\u0000\u0010I\u0018\u0001\"\u0010\b\u0001\u0010E*\n\u0012\u0006\b\u0000\u0012\u00028\u00000D*\u0006\u0012\u0002\b\u00030\t2\u0006\u0010F\u001a\u00028\u0001H\u0086\b¢\u0006\u0004\bM\u0010N\u001a:\u0010O\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b¢\u0006\u0004\bO\u0010=\u001a)\u0010Q\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\b\b\u0000\u0010\u0000*\u00020P*\n\u0012\u0006\u0012\u0004\u0018\u00018\u00000\t¢\u0006\u0004\bQ\u0010L\u001a=\u0010R\u001a\u00028\u0000\"\u0010\b\u0000\u0010E*\n\u0012\u0006\b\u0000\u0012\u00028\u00010D\"\b\b\u0001\u0010\u0000*\u00020P*\n\u0012\u0006\u0012\u0004\u0018\u00018\u00010\t2\u0006\u0010F\u001a\u00028\u0000¢\u0006\u0004\bR\u0010N\u001aN\u0010S\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u0010\b\u0001\u0010E*\n\u0012\u0006\b\u0000\u0012\u00028\u00000D*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010F\u001a\u00028\u00012\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b¢\u0006\u0004\bS\u0010T\u001aN\u0010U\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u0010\b\u0001\u0010E*\n\u0012\u0006\b\u0000\u0012\u00028\u00000D*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010F\u001a\u00028\u00012\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b¢\u0006\u0004\bU\u0010T\u001a+\u0010X\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010W\u001a\u00020V¢\u0006\u0004\bX\u0010Y\u001a1\u0010X\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\f\u0010W\u001a\b\u0012\u0004\u0012\u00020\u000e0\t¢\u0006\u0004\bX\u0010Z\u001a+\u0010[\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u00105\u001a\u00020\u000e¢\u0006\u0004\b[\u00107\u001a+\u0010\\\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u00105\u001a\u00020\u000e¢\u0006\u0004\b\\\u00109\u001a:\u0010]\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b¢\u0006\u0004\b]\u0010;\u001a:\u0010^\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b¢\u0006\u0004\b^\u0010=\u001a#\u0010_\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t¢\u0006\u0004\b_\u0010L\u001aH\u0010d\u001a\u00020c\"\u0004\b\u0000\u0010\u0000\"\u000e\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00010`*\b\u0012\u0004\u0012\u00028\u00000a2\u0016\b\u0004\u0010b\u001a\u0010\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010\u0013H\u0086\b¢\u0006\u0004\bd\u0010e\u001aH\u0010f\u001a\u00020c\"\u0004\b\u0000\u0010\u0000\"\u000e\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00010`*\b\u0012\u0004\u0012\u00028\u00000a2\u0016\b\u0004\u0010b\u001a\u0010\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010\u0013H\u0086\b¢\u0006\u0004\bf\u0010e\u001a'\u0010g\u001a\u00020c\"\u000e\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000`*\b\u0012\u0004\u0012\u00028\u00000a¢\u0006\u0004\bg\u0010h\u001a-\u0010i\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u000e\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000`*\b\u0012\u0004\u0012\u00028\u00000\t¢\u0006\u0004\bi\u0010L\u001aN\u0010j\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000\"\u000e\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00010`*\b\u0012\u0004\u0012\u00028\u00000\t2\u0016\b\u0004\u0010b\u001a\u0010\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010\u0013H\u0086\b¢\u0006\u0004\bj\u0010=\u001aN\u0010k\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000\"\u000e\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00010`*\b\u0012\u0004\u0012\u00028\u00000\t2\u0016\b\u0004\u0010b\u001a\u0010\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010\u0013H\u0086\b¢\u0006\u0004\bk\u0010=\u001a-\u0010l\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u000e\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000`*\b\u0012\u0004\u0012\u00028\u00000\t¢\u0006\u0004\bl\u0010L\u001a?\u0010p\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u001a\u0010o\u001a\u0016\u0012\u0006\b\u0000\u0012\u00028\u00000mj\n\u0012\u0006\b\u0000\u0012\u00028\u0000`n¢\u0006\u0004\bp\u0010q\u001a\u0017\u0010s\u001a\u00020r*\b\u0012\u0004\u0012\u00020\u000b0-¢\u0006\u0004\bs\u0010t\u001a\u0017\u0010w\u001a\u00020v*\b\u0012\u0004\u0012\u00020u0-¢\u0006\u0004\bw\u0010x\u001a\u0017\u0010{\u001a\u00020z*\b\u0012\u0004\u0012\u00020y0-¢\u0006\u0004\b{\u0010|\u001a\u0018\u0010\u007f\u001a\u00020~*\b\u0012\u0004\u0012\u00020}0-¢\u0006\u0005\b\u007f\u0010\u0080\u0001\u001a\u001c\u0010\u0083\u0001\u001a\u00030\u0082\u0001*\t\u0012\u0005\u0012\u00030\u0081\u00010-¢\u0006\u0006\b\u0083\u0001\u0010\u0084\u0001\u001a\u001b\u0010\u0086\u0001\u001a\u00030\u0085\u0001*\b\u0012\u0004\u0012\u00020\u000e0-¢\u0006\u0006\b\u0086\u0001\u0010\u0087\u0001\u001a\u001c\u0010\u008a\u0001\u001a\u00030\u0089\u0001*\t\u0012\u0005\u0012\u00030\u0088\u00010-¢\u0006\u0006\b\u008a\u0001\u0010\u008b\u0001\u001a\u001c\u0010\u008e\u0001\u001a\u00030\u008d\u0001*\t\u0012\u0005\u0012\u00030\u008c\u00010-¢\u0006\u0006\b\u008e\u0001\u0010\u008f\u0001\u001a`\u0010\u0095\u0001\u001a\u000f\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00020\u0094\u0001\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u0090\u0001\"\u0005\b\u0002\u0010\u0091\u0001*\b\u0012\u0004\u0012\u00028\u00000\t2 \u0010\u0093\u0001\u001a\u001b\u0012\u0004\u0012\u00028\u0000\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00020\u0092\u00010\u0013H\u0086\b¢\u0006\u0006\b\u0095\u0001\u0010\u0096\u0001\u001aL\u0010\u0098\u0001\u001a\u000f\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000\u0094\u0001\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u0090\u0001*\b\u0012\u0004\u0012\u00028\u00000\t2\u0013\u0010\u0097\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0013H\u0086\b¢\u0006\u0006\b\u0098\u0001\u0010\u0096\u0001\u001ah\u0010\u0098\u0001\u001a\u000f\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00020\u0094\u0001\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u0090\u0001\"\u0005\b\u0002\u0010\u0091\u0001*\b\u0012\u0004\u0012\u00028\u00000\t2\u0013\u0010\u0097\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00132\u0013\u0010\u0099\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00020\u0013H\u0086\b¢\u0006\u0006\b\u0098\u0001\u0010\u009a\u0001\u001ac\u0010\u009d\u0001\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u0090\u0001\"\u001a\b\u0002\u0010\u009c\u0001*\u0013\u0012\u0006\b\u0000\u0012\u00028\u0001\u0012\u0006\b\u0000\u0012\u00028\u00000\u009b\u0001*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010F\u001a\u00028\u00022\u0013\u0010\u0097\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0013H\u0086\b¢\u0006\u0006\b\u009d\u0001\u0010\u009e\u0001\u001a\u007f\u0010\u009d\u0001\u001a\u00028\u0003\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u0090\u0001\"\u0005\b\u0002\u0010\u0091\u0001\"\u001a\b\u0003\u0010\u009c\u0001*\u0013\u0012\u0006\b\u0000\u0012\u00028\u0001\u0012\u0006\b\u0000\u0012\u00028\u00020\u009b\u0001*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010F\u001a\u00028\u00032\u0013\u0010\u0097\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00132\u0013\u0010\u0099\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00020\u0013H\u0086\b¢\u0006\u0006\b\u009d\u0001\u0010\u009f\u0001\u001aw\u0010 \u0001\u001a\u00028\u0003\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u0090\u0001\"\u0005\b\u0002\u0010\u0091\u0001\"\u001a\b\u0003\u0010\u009c\u0001*\u0013\u0012\u0006\b\u0000\u0012\u00028\u0001\u0012\u0006\b\u0000\u0012\u00028\u00020\u009b\u0001*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010F\u001a\u00028\u00032 \u0010\u0093\u0001\u001a\u001b\u0012\u0004\u0012\u00028\u0000\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00020\u0092\u00010\u0013H\u0086\b¢\u0006\u0006\b \u0001\u0010\u009e\u0001\u001aM\u0010¢\u0001\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0094\u0001\"\u0005\b\u0000\u0010\u0090\u0001\"\u0005\b\u0001\u0010\u0091\u0001*\b\u0012\u0004\u0012\u00028\u00000\t2\u0013\u0010¡\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0013H\u0087\b¢\u0006\u0006\b¢\u0001\u0010\u0096\u0001\u001ad\u0010£\u0001\u001a\u00028\u0002\"\u0005\b\u0000\u0010\u0090\u0001\"\u0005\b\u0001\u0010\u0091\u0001\"\u001a\b\u0002\u0010\u009c\u0001*\u0013\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u0006\b\u0000\u0012\u00028\u00010\u009b\u0001*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010F\u001a\u00028\u00022\u0013\u0010¡\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0013H\u0087\b¢\u0006\u0006\b£\u0001\u0010\u009e\u0001\u001a9\u0010¤\u0001\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u0010\b\u0001\u0010E*\n\u0012\u0006\b\u0000\u0012\u00028\u00000D*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010F\u001a\u00028\u0001¢\u0006\u0005\b¤\u0001\u0010N\u001a2\u0010§\u0001\u001a\u0014\u0012\u0004\u0012\u00028\u00000¥\u0001j\t\u0012\u0004\u0012\u00028\u0000`¦\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t¢\u0006\u0006\b§\u0001\u0010¨\u0001\u001a%\u0010©\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t¢\u0006\u0005\b©\u0001\u0010L\u001a%\u0010ª\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000a\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t¢\u0006\u0005\bª\u0001\u0010L\u001a&\u0010ª\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000a\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000-¢\u0006\u0006\bª\u0001\u0010«\u0001\u001a'\u0010\u00ad\u0001\u001a\t\u0012\u0004\u0012\u00028\u00000¬\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t¢\u0006\u0006\b\u00ad\u0001\u0010®\u0001\u001aI\u0010¯\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0001\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00000\t2\u0019\u0010\u0093\u0001\u001a\u0014\u0012\u0004\u0012\u00028\u0000\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00010\t0\u0013H\u0086\b¢\u0006\u0005\b¯\u0001\u0010=\u001a]\u0010°\u0001\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010I\"\u0010\b\u0002\u0010E*\n\u0012\u0006\b\u0000\u0012\u00028\u00010D*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010F\u001a\u00028\u00022\u0019\u0010\u0093\u0001\u001a\u0014\u0012\u0004\u0012\u00028\u0000\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00010\t0\u0013H\u0086\b¢\u0006\u0005\b°\u0001\u0010T\u001aR\u0010±\u0001\u001a\u0015\u0012\u0004\u0012\u00028\u0001\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000\u00010\u0094\u0001\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u0090\u0001*\b\u0012\u0004\u0012\u00028\u00000\t2\u0013\u0010\u0097\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0013H\u0086\b¢\u0006\u0006\b±\u0001\u0010\u0096\u0001\u001an\u0010±\u0001\u001a\u0015\u0012\u0004\u0012\u00028\u0001\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00020\u00010\u0094\u0001\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u0090\u0001\"\u0005\b\u0002\u0010\u0091\u0001*\b\u0012\u0004\u0012\u00028\u00000\t2\u0013\u0010\u0097\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00132\u0013\u0010\u0099\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00020\u0013H\u0086\b¢\u0006\u0006\b±\u0001\u0010\u009a\u0001\u001ag\u0010²\u0001\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u0090\u0001\"\u001e\b\u0002\u0010\u009c\u0001*\u0017\u0012\u0006\b\u0000\u0012\u00028\u0001\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000a0\u009b\u0001*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010F\u001a\u00028\u00022\u0013\u0010\u0097\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0013H\u0086\b¢\u0006\u0006\b²\u0001\u0010\u009e\u0001\u001a\u0083\u0001\u0010²\u0001\u001a\u00028\u0003\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u0090\u0001\"\u0005\b\u0002\u0010\u0091\u0001\"\u001e\b\u0003\u0010\u009c\u0001*\u0017\u0012\u0006\b\u0000\u0012\u00028\u0001\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00020a0\u009b\u0001*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010F\u001a\u00028\u00032\u0013\u0010\u0097\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00132\u0013\u0010\u0099\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00020\u0013H\u0086\b¢\u0006\u0006\b²\u0001\u0010\u009f\u0001\u001aN\u0010´\u0001\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010³\u0001\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u0090\u0001*\b\u0012\u0004\u0012\u00028\u00000\t2\u0015\b\u0004\u0010\u0097\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0013H\u0087\b¢\u0006\u0006\b´\u0001\u0010µ\u0001\u001aC\u0010¶\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0001\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00000\t2\u0013\u0010\u0093\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0013H\u0086\b¢\u0006\u0005\b¶\u0001\u0010=\u001aX\u0010·\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0001\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00000\t2(\u0010\u0093\u0001\u001a#\u0012\u0013\u0012\u00110\u000e¢\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010?H\u0086\b¢\u0006\u0005\b·\u0001\u0010C\u001a^\u0010¸\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0001\"\u0004\b\u0000\u0010\u0000\"\b\b\u0001\u0010I*\u00020P*\b\u0012\u0004\u0012\u00028\u00000\t2*\u0010\u0093\u0001\u001a%\u0012\u0013\u0012\u00110\u000e¢\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010?H\u0086\b¢\u0006\u0005\b¸\u0001\u0010C\u001ar\u0010¹\u0001\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0000\"\b\b\u0001\u0010I*\u00020P\"\u0010\b\u0002\u0010E*\n\u0012\u0006\b\u0000\u0012\u00028\u00010D*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010F\u001a\u00028\u00022*\u0010\u0093\u0001\u001a%\u0012\u0013\u0012\u00110\u000e¢\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010?H\u0086\b¢\u0006\u0005\b¹\u0001\u0010H\u001al\u0010º\u0001\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010I\"\u0010\b\u0002\u0010E*\n\u0012\u0006\b\u0000\u0012\u00028\u00010D*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010F\u001a\u00028\u00022(\u0010\u0093\u0001\u001a#\u0012\u0013\u0012\u00110\u000e¢\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010?H\u0086\b¢\u0006\u0005\bº\u0001\u0010H\u001aI\u0010»\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0001\"\u0004\b\u0000\u0010\u0000\"\b\b\u0001\u0010I*\u00020P*\b\u0012\u0004\u0012\u00028\u00000\t2\u0015\u0010\u0093\u0001\u001a\u0010\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010\u0013H\u0086\b¢\u0006\u0005\b»\u0001\u0010=\u001a]\u0010¼\u0001\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0000\"\b\b\u0001\u0010I*\u00020P\"\u0010\b\u0002\u0010E*\n\u0012\u0006\b\u0000\u0012\u00028\u00010D*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010F\u001a\u00028\u00022\u0015\u0010\u0093\u0001\u001a\u0010\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010\u0013H\u0086\b¢\u0006\u0005\b¼\u0001\u0010T\u001aW\u0010½\u0001\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010I\"\u0010\b\u0002\u0010E*\n\u0012\u0006\b\u0000\u0012\u00028\u00010D*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010F\u001a\u00028\u00022\u0013\u0010\u0093\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0013H\u0086\b¢\u0006\u0005\b½\u0001\u0010T\u001a-\u0010¿\u0001\u001a\u000f\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00000¾\u00010\t\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t¢\u0006\u0006\b¿\u0001\u0010À\u0001\u001a%\u0010Á\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t¢\u0006\u0005\bÁ\u0001\u0010L\u001aC\u0010Â\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u0090\u0001*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010b\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0013H\u0086\b¢\u0006\u0005\bÂ\u0001\u0010=\u001a9\u0010Ä\u0001\u001a\t\u0012\u0004\u0012\u00028\u00000¬\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\r\u0010Ã\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\tH\u0086\u0004¢\u0006\u0006\bÄ\u0001\u0010Å\u0001\u001a9\u0010Æ\u0001\u001a\t\u0012\u0004\u0012\u00028\u00000¬\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\r\u0010Ã\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\tH\u0086\u0004¢\u0006\u0006\bÆ\u0001\u0010Å\u0001\u001a'\u0010È\u0001\u001a\t\u0012\u0004\u0012\u00028\u00000Ç\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t¢\u0006\u0006\bÈ\u0001\u0010®\u0001\u001a9\u0010É\u0001\u001a\t\u0012\u0004\u0012\u00028\u00000¬\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\r\u0010Ã\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\tH\u0086\u0004¢\u0006\u0006\bÉ\u0001\u0010Å\u0001\u001a7\u0010Ê\u0001\u001a\u00020\u000b\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b¢\u0006\u0006\bÊ\u0001\u0010Ë\u0001\u001a \u0010Ì\u0001\u001a\u00020\u000b\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t¢\u0006\u0006\bÌ\u0001\u0010Í\u0001\u001a7\u0010Ì\u0001\u001a\u00020\u000b\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b¢\u0006\u0006\bÌ\u0001\u0010Ë\u0001\u001a \u0010Î\u0001\u001a\u00020\u000e\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t¢\u0006\u0006\bÎ\u0001\u0010Ï\u0001\u001a#\u0010Î\u0001\u001a\u00020\u000e\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000-H\u0087\b¢\u0006\u0006\bÎ\u0001\u0010Ð\u0001\u001a6\u0010Î\u0001\u001a\u00020\u000e\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b¢\u0006\u0005\bÎ\u0001\u0010'\u001a]\u0010Ô\u0001\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00000\t2\u0007\u0010Ñ\u0001\u001a\u00028\u00012)\u0010Ó\u0001\u001a$\u0012\u0014\u0012\u00128\u0001¢\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(Ò\u0001\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010?H\u0086\b¢\u0006\u0006\bÔ\u0001\u0010Õ\u0001\u001as\u0010×\u0001\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00000\t2\u0007\u0010Ñ\u0001\u001a\u00028\u00012?\u0010Ó\u0001\u001a:\u0012\u0013\u0012\u00110\u000e¢\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(\u000f\u0012\u0014\u0012\u00128\u0001¢\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(Ò\u0001\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010Ö\u0001H\u0086\b¢\u0006\u0006\b×\u0001\u0010Ø\u0001\u001a]\u0010Ù\u0001\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0007\u0010Ñ\u0001\u001a\u00028\u00012)\u0010Ó\u0001\u001a$\u0012\u0004\u0012\u00028\u0000\u0012\u0014\u0012\u00128\u0001¢\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(Ò\u0001\u0012\u0004\u0012\u00028\u00010?H\u0086\b¢\u0006\u0006\bÙ\u0001\u0010Ú\u0001\u001as\u0010Û\u0001\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0007\u0010Ñ\u0001\u001a\u00028\u00012?\u0010Ó\u0001\u001a:\u0012\u0013\u0012\u00110\u000e¢\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0014\u0012\u00128\u0001¢\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(Ò\u0001\u0012\u0004\u0012\u00028\u00010Ö\u0001H\u0086\b¢\u0006\u0006\bÛ\u0001\u0010Ü\u0001\u001a8\u0010Þ\u0001\u001a\u00020c\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0013\u0010Ý\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020c0\u0013H\u0087\b¢\u0006\u0006\bÞ\u0001\u0010ß\u0001\u001aM\u0010à\u0001\u001a\u00020c\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2(\u0010Ý\u0001\u001a#\u0012\u0013\u0012\u00110\u000e¢\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020c0?H\u0086\b¢\u0006\u0006\bà\u0001\u0010á\u0001\u001a\u001e\u0010â\u0001\u001a\u0004\u0018\u00010}*\b\u0012\u0004\u0012\u00020}0\tH\u0007¢\u0006\u0006\bâ\u0001\u0010ã\u0001\u001a \u0010â\u0001\u001a\u0005\u0018\u00010\u0081\u0001*\t\u0012\u0005\u0012\u00030\u0081\u00010\tH\u0007¢\u0006\u0006\bâ\u0001\u0010ä\u0001\u001a,\u0010â\u0001\u001a\u0004\u0018\u00018\u0000\"\u000e\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000`*\b\u0012\u0004\u0012\u00028\u00000\t¢\u0006\u0006\bâ\u0001\u0010å\u0001\u001aH\u0010æ\u0001\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000\"\u000e\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00010`*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010b\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0013H\u0086\b¢\u0006\u0005\bæ\u0001\u0010\u001b\u001a>\u0010ç\u0001\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u001a\u0010o\u001a\u0016\u0012\u0006\b\u0000\u0012\u00028\u00000mj\n\u0012\u0006\b\u0000\u0012\u00028\u0000`n¢\u0006\u0006\bç\u0001\u0010è\u0001\u001a\u001e\u0010é\u0001\u001a\u0004\u0018\u00010}*\b\u0012\u0004\u0012\u00020}0\tH\u0007¢\u0006\u0006\bé\u0001\u0010ã\u0001\u001a \u0010é\u0001\u001a\u0005\u0018\u00010\u0081\u0001*\t\u0012\u0005\u0012\u00030\u0081\u00010\tH\u0007¢\u0006\u0006\bé\u0001\u0010ä\u0001\u001a,\u0010é\u0001\u001a\u0004\u0018\u00018\u0000\"\u000e\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000`*\b\u0012\u0004\u0012\u00028\u00000\t¢\u0006\u0006\bé\u0001\u0010å\u0001\u001aH\u0010ê\u0001\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000\"\u000e\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00010`*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010b\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0013H\u0086\b¢\u0006\u0005\bê\u0001\u0010\u001b\u001a>\u0010ë\u0001\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u001a\u0010o\u001a\u0016\u0012\u0006\b\u0000\u0012\u00028\u00000mj\n\u0012\u0006\b\u0000\u0012\u00028\u0000`n¢\u0006\u0006\bë\u0001\u0010è\u0001\u001a \u0010ì\u0001\u001a\u00020\u000b\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t¢\u0006\u0006\bì\u0001\u0010Í\u0001\u001a7\u0010ì\u0001\u001a\u00020\u000b\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b¢\u0006\u0006\bì\u0001\u0010Ë\u0001\u001aB\u0010í\u0001\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u000e\b\u0001\u0010E*\b\u0012\u0004\u0012\u00028\u00000\t*\u00028\u00012\u0013\u0010Ý\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020c0\u0013H\u0087\b¢\u0006\u0006\bí\u0001\u0010î\u0001\u001aY\u0010ð\u0001\u001a\u00028\u0000\"\u0005\b\u0000\u0010ï\u0001\"\b\b\u0001\u0010\u0000*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\t2)\u0010Ó\u0001\u001a$\u0012\u0014\u0012\u00128\u0000¢\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(Ò\u0001\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000?H\u0086\b¢\u0006\u0006\bð\u0001\u0010ñ\u0001\u001ao\u0010ò\u0001\u001a\u00028\u0000\"\u0005\b\u0000\u0010ï\u0001\"\b\b\u0001\u0010\u0000*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\t2?\u0010Ó\u0001\u001a:\u0012\u0013\u0012\u00110\u000e¢\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(\u000f\u0012\u0014\u0012\u00128\u0000¢\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(Ò\u0001\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000Ö\u0001H\u0086\b¢\u0006\u0006\bò\u0001\u0010ó\u0001\u001a[\u0010ô\u0001\u001a\u0004\u0018\u00018\u0000\"\u0005\b\u0000\u0010ï\u0001\"\b\b\u0001\u0010\u0000*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\t2)\u0010Ó\u0001\u001a$\u0012\u0014\u0012\u00128\u0000¢\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(Ò\u0001\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000?H\u0087\b¢\u0006\u0006\bô\u0001\u0010ñ\u0001\u001aY\u0010õ\u0001\u001a\u00028\u0000\"\u0005\b\u0000\u0010ï\u0001\"\b\b\u0001\u0010\u0000*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\u00012)\u0010Ó\u0001\u001a$\u0012\u0004\u0012\u00028\u0001\u0012\u0014\u0012\u00128\u0000¢\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(Ò\u0001\u0012\u0004\u0012\u00028\u00000?H\u0086\b¢\u0006\u0006\bõ\u0001\u0010ö\u0001\u001ao\u0010÷\u0001\u001a\u00028\u0000\"\u0005\b\u0000\u0010ï\u0001\"\b\b\u0001\u0010\u0000*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\u00012?\u0010Ó\u0001\u001a:\u0012\u0013\u0012\u00110\u000e¢\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(\u000f\u0012\u0004\u0012\u00028\u0001\u0012\u0014\u0012\u00128\u0000¢\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(Ò\u0001\u0012\u0004\u0012\u00028\u00000Ö\u0001H\u0086\b¢\u0006\u0006\b÷\u0001\u0010ø\u0001\u001a[\u0010ù\u0001\u001a\u0004\u0018\u00018\u0000\"\u0005\b\u0000\u0010ï\u0001\"\b\b\u0001\u0010\u0000*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\u00012)\u0010Ó\u0001\u001a$\u0012\u0004\u0012\u00028\u0001\u0012\u0014\u0012\u00128\u0000¢\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(Ò\u0001\u0012\u0004\u0012\u00028\u00000?H\u0087\b¢\u0006\u0006\bù\u0001\u0010ö\u0001\u001ac\u0010ú\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0001\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00000\t2\u0007\u0010Ñ\u0001\u001a\u00028\u00012)\u0010Ó\u0001\u001a$\u0012\u0014\u0012\u00128\u0001¢\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(Ò\u0001\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010?H\u0087\b¢\u0006\u0006\bú\u0001\u0010û\u0001\u001ay\u0010ü\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0001\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00000\t2\u0007\u0010Ñ\u0001\u001a\u00028\u00012?\u0010Ó\u0001\u001a:\u0012\u0013\u0012\u00110\u000e¢\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(\u000f\u0012\u0014\u0012\u00128\u0001¢\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(Ò\u0001\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010Ö\u0001H\u0087\b¢\u0006\u0006\bü\u0001\u0010ý\u0001\u001a^\u0010þ\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0005\b\u0000\u0010ï\u0001\"\b\b\u0001\u0010\u0000*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\t2)\u0010Ó\u0001\u001a$\u0012\u0014\u0012\u00128\u0000¢\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(Ò\u0001\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000?H\u0087\b¢\u0006\u0005\bþ\u0001\u0010C\u001au\u0010ÿ\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0005\b\u0000\u0010ï\u0001\"\b\b\u0001\u0010\u0000*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\t2?\u0010Ó\u0001\u001a:\u0012\u0013\u0012\u00110\u000e¢\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(\u000f\u0012\u0014\u0012\u00128\u0000¢\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(Ò\u0001\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000Ö\u0001H\u0087\b¢\u0006\u0006\bÿ\u0001\u0010\u0080\u0002\u001a6\u0010\u0081\u0002\u001a\u00020\u000e\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010b\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000e0\u0013H\u0086\b¢\u0006\u0005\b\u0081\u0002\u0010'\u001a7\u0010\u0082\u0002\u001a\u00020}\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010b\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020}0\u0013H\u0086\b¢\u0006\u0006\b\u0082\u0002\u0010\u0083\u0002\u001a,\u0010\u0084\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\t\"\b\b\u0000\u0010\u0000*\u00020P*\n\u0012\u0006\u0012\u0004\u0018\u00018\u00000\t¢\u0006\u0006\b\u0084\u0002\u0010À\u0001\u001a,\u0010\u0084\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\b\b\u0000\u0010\u0000*\u00020P*\n\u0012\u0006\u0012\u0004\u0018\u00018\u00000\u0001¢\u0006\u0006\b\u0084\u0002\u0010\u0085\u0002\u001a6\u0010\u0087\u0002\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000\u00010\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0007\u0010\u0086\u0002\u001a\u00020\u000eH\u0007¢\u0006\u0005\b\u0087\u0002\u00107\u001aR\u0010\u0087\u0002\u001a\b\u0012\u0004\u0012\u00028\u00010\u0001\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00000\t2\u0007\u0010\u0086\u0002\u001a\u00020\u000e2\u0019\u0010\u0093\u0001\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000\u0001\u0012\u0004\u0012\u00028\u00010\u0013H\u0007¢\u0006\u0006\b\u0087\u0002\u0010\u0088\u0002\u001a1\u0010\u0089\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010\n\u001a\u00028\u0000H\u0086\u0002¢\u0006\u0006\b\u0089\u0002\u0010\u008a\u0002\u001a;\u0010\u0089\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0010\u0010\u008c\u0002\u001a\u000b\u0012\u0006\b\u0001\u0012\u00028\u00000\u008b\u0002H\u0086\u0002¢\u0006\u0006\b\u0089\u0002\u0010\u008d\u0002\u001a8\u0010\u0089\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\r\u0010\u008c\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\tH\u0086\u0002¢\u0006\u0006\b\u0089\u0002\u0010\u008e\u0002\u001a9\u0010\u0089\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u000e\u0010\u008c\u0002\u001a\t\u0012\u0004\u0012\u00028\u00000\u008f\u0002H\u0086\u0002¢\u0006\u0006\b\u0089\u0002\u0010\u0090\u0002\u001a1\u0010\u0091\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010\n\u001a\u00028\u0000H\u0087\b¢\u0006\u0006\b\u0091\u0002\u0010\u008a\u0002\u001aP\u0010\u0092\u0002\u001a\u001b\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000\u0001\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000\u00010\u0092\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b¢\u0006\u0006\b\u0092\u0002\u0010\u0093\u0002\u001a1\u0010\u0094\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010\n\u001a\u00028\u0000H\u0086\u0002¢\u0006\u0006\b\u0094\u0002\u0010\u008a\u0002\u001a1\u0010\u0094\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000-2\u0006\u0010\n\u001a\u00028\u0000H\u0086\u0002¢\u0006\u0006\b\u0094\u0002\u0010\u0095\u0002\u001a;\u0010\u0094\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0010\u0010\u008c\u0002\u001a\u000b\u0012\u0006\b\u0001\u0012\u00028\u00000\u008b\u0002H\u0086\u0002¢\u0006\u0006\b\u0094\u0002\u0010\u008d\u0002\u001a;\u0010\u0094\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000-2\u0010\u0010\u008c\u0002\u001a\u000b\u0012\u0006\b\u0001\u0012\u00028\u00000\u008b\u0002H\u0086\u0002¢\u0006\u0006\b\u0094\u0002\u0010\u0096\u0002\u001a8\u0010\u0094\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\r\u0010\u008c\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\tH\u0086\u0002¢\u0006\u0006\b\u0094\u0002\u0010\u008e\u0002\u001a8\u0010\u0094\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000-2\r\u0010\u008c\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\tH\u0086\u0002¢\u0006\u0006\b\u0094\u0002\u0010\u0097\u0002\u001a9\u0010\u0094\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u000e\u0010\u008c\u0002\u001a\t\u0012\u0004\u0012\u00028\u00000\u008f\u0002H\u0086\u0002¢\u0006\u0006\b\u0094\u0002\u0010\u0090\u0002\u001a9\u0010\u0094\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000-2\u000e\u0010\u008c\u0002\u001a\t\u0012\u0004\u0012\u00028\u00000\u008f\u0002H\u0086\u0002¢\u0006\u0006\b\u0094\u0002\u0010\u0098\u0002\u001a1\u0010\u0099\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010\n\u001a\u00028\u0000H\u0087\b¢\u0006\u0006\b\u0099\u0002\u0010\u008a\u0002\u001a1\u0010\u0099\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000-2\u0006\u0010\n\u001a\u00028\u0000H\u0087\b¢\u0006\u0006\b\u0099\u0002\u0010\u0095\u0002\u001aM\u0010\u009c\u0002\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000\u00010\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0007\u0010\u0086\u0002\u001a\u00020\u000e2\t\b\u0002\u0010\u009a\u0002\u001a\u00020\u000e2\t\b\u0002\u0010\u009b\u0002\u001a\u00020\u000bH\u0007¢\u0006\u0006\b\u009c\u0002\u0010\u009d\u0002\u001ah\u0010\u009c\u0002\u001a\b\u0012\u0004\u0012\u00028\u00010\u0001\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00000\t2\u0007\u0010\u0086\u0002\u001a\u00020\u000e2\t\b\u0002\u0010\u009a\u0002\u001a\u00020\u000e2\t\b\u0002\u0010\u009b\u0002\u001a\u00020\u000b2\u0019\u0010\u0093\u0001\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000\u0001\u0012\u0004\u0012\u00028\u00010\u0013H\u0007¢\u0006\u0006\b\u009c\u0002\u0010\u009e\u0002\u001aN\u0010\u009f\u0002\u001a\u0015\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0092\u00010\u0001\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00000\t2\u0010\u0010Ã\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u00028\u00010\u008b\u0002H\u0086\u0004¢\u0006\u0006\b\u009f\u0002\u0010\u008d\u0002\u001a\u0083\u0001\u0010\u009f\u0002\u001a\b\u0012\u0004\u0012\u00028\u00020\u0001\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010I\"\u0005\b\u0002\u0010\u0091\u0001*\b\u0012\u0004\u0012\u00028\u00000\t2\u0010\u0010Ã\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u00028\u00010\u008b\u000229\u0010\u0093\u0001\u001a4\u0012\u0014\u0012\u00128\u0000¢\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b( \u0002\u0012\u0014\u0012\u00128\u0001¢\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(¡\u0002\u0012\u0004\u0012\u00028\u00020?H\u0086\b¢\u0006\u0006\b\u009f\u0002\u0010¢\u0002\u001aK\u0010\u009f\u0002\u001a\u0015\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0092\u00010\u0001\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00000\t2\r\u0010Ã\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\tH\u0086\u0004¢\u0006\u0006\b\u009f\u0002\u0010\u008e\u0002\u001a\u0080\u0001\u0010\u009f\u0002\u001a\b\u0012\u0004\u0012\u00028\u00020\u0001\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010I\"\u0005\b\u0002\u0010\u0091\u0001*\b\u0012\u0004\u0012\u00028\u00000\t2\r\u0010Ã\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\t29\u0010\u0093\u0001\u001a4\u0012\u0014\u0012\u00128\u0000¢\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b( \u0002\u0012\u0014\u0012\u00128\u0001¢\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(¡\u0002\u0012\u0004\u0012\u00028\u00020?H\u0086\b¢\u0006\u0006\b\u009f\u0002\u0010£\u0002\u001a4\u0010¤\u0002\u001a\u0015\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00000\u0092\u00010\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\tH\u0007¢\u0006\u0005\b¤\u0002\u0010L\u001ai\u0010¤\u0002\u001a\b\u0012\u0004\u0012\u00028\u00010\u0001\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00000\t29\u0010\u0093\u0001\u001a4\u0012\u0014\u0012\u00128\u0000¢\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b( \u0002\u0012\u0014\u0012\u00128\u0000¢\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(¡\u0002\u0012\u0004\u0012\u00028\u00010?H\u0087\b¢\u0006\u0005\b¤\u0002\u0010C\u001a\u008f\u0001\u0010¯\u0002\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u000f\b\u0001\u0010§\u0002*\b0¥\u0002j\u0003`¦\u0002*\b\u0012\u0004\u0012\u00028\u00000\t2\u0007\u0010¨\u0002\u001a\u00028\u00012\n\b\u0002\u0010ª\u0002\u001a\u00030©\u00022\n\b\u0002\u0010«\u0002\u001a\u00030©\u00022\n\b\u0002\u0010¬\u0002\u001a\u00030©\u00022\t\b\u0002\u0010\u00ad\u0002\u001a\u00020\u000e2\n\b\u0002\u0010®\u0002\u001a\u00030©\u00022\u0018\b\u0002\u0010\u0093\u0001\u001a\u0011\u0012\u0004\u0012\u00028\u0000\u0012\u0005\u0012\u00030©\u0002\u0018\u00010\u0013¢\u0006\u0006\b¯\u0002\u0010°\u0002\u001av\u0010²\u0002\u001a\u00030±\u0002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\n\b\u0002\u0010ª\u0002\u001a\u00030©\u00022\n\b\u0002\u0010«\u0002\u001a\u00030©\u00022\n\b\u0002\u0010¬\u0002\u001a\u00030©\u00022\t\b\u0002\u0010\u00ad\u0002\u001a\u00020\u000e2\n\b\u0002\u0010®\u0002\u001a\u00030©\u00022\u0018\b\u0002\u0010\u0093\u0001\u001a\u0011\u0012\u0004\u0012\u00028\u0000\u0012\u0005\u0012\u00030©\u0002\u0018\u00010\u0013¢\u0006\u0006\b²\u0002\u0010³\u0002\u001a)\u0010´\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\t\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\tH\u0087\b¢\u0006\u0006\b´\u0002\u0010À\u0001\u001a'\u0010µ\u0002\u001a\t\u0012\u0004\u0012\u00028\u00000\u008f\u0002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t¢\u0006\u0006\bµ\u0002\u0010¶\u0002\u001a\u001c\u0010¹\u0002\u001a\u00020}*\b\u0012\u0004\u0012\u00020u0\tH\u0007¢\u0006\u0006\b·\u0002\u0010¸\u0002\u001a\u001d\u0010¹\u0002\u001a\u00020}*\t\u0012\u0005\u0012\u00030\u008c\u00010\tH\u0007¢\u0006\u0006\bº\u0002\u0010¸\u0002\u001a\u001c\u0010¹\u0002\u001a\u00020}*\b\u0012\u0004\u0012\u00020\u000e0\tH\u0007¢\u0006\u0006\b»\u0002\u0010¸\u0002\u001a\u001d\u0010¹\u0002\u001a\u00020}*\t\u0012\u0005\u0012\u00030\u0088\u00010\tH\u0007¢\u0006\u0006\b¼\u0002\u0010¸\u0002\u001a\u001d\u0010¹\u0002\u001a\u00020}*\t\u0012\u0005\u0012\u00030\u0081\u00010\tH\u0007¢\u0006\u0006\b½\u0002\u0010¸\u0002\u001a\u001c\u0010¹\u0002\u001a\u00020}*\b\u0012\u0004\u0012\u00020}0\tH\u0007¢\u0006\u0006\b¾\u0002\u0010¸\u0002\u001a\u001c\u0010À\u0002\u001a\u00020\u000e*\b\u0012\u0004\u0012\u00020u0\tH\u0007¢\u0006\u0006\b¿\u0002\u0010Ï\u0001\u001a\u001d\u0010À\u0002\u001a\u00020\u000e*\t\u0012\u0005\u0012\u00030\u008c\u00010\tH\u0007¢\u0006\u0006\bÁ\u0002\u0010Ï\u0001\u001a\u001c\u0010À\u0002\u001a\u00020\u000e*\b\u0012\u0004\u0012\u00020\u000e0\tH\u0007¢\u0006\u0006\bÂ\u0002\u0010Ï\u0001\u001a\u001e\u0010À\u0002\u001a\u00030\u0088\u0001*\t\u0012\u0005\u0012\u00030\u0088\u00010\tH\u0007¢\u0006\u0006\bÃ\u0002\u0010Ä\u0002\u001a\u001e\u0010À\u0002\u001a\u00030\u0081\u0001*\t\u0012\u0005\u0012\u00030\u0081\u00010\tH\u0007¢\u0006\u0006\bÅ\u0002\u0010Æ\u0002\u001a\u001c\u0010À\u0002\u001a\u00020}*\b\u0012\u0004\u0012\u00020}0\tH\u0007¢\u0006\u0006\bÇ\u0002\u0010¸\u0002¨\u0006È\u0002"}, d2 = {ExifInterface.GPS_DIRECTION_TRUE, "", "component1", "(Ljava/util/List;)Ljava/lang/Object;", "component2", "component3", "component4", "component5", "Lkotlin/internal/OnlyInputTypes;", "", "element", "", "contains", "(Ljava/lang/Iterable;Ljava/lang/Object;)Z", "", "index", "elementAt", "(Ljava/lang/Iterable;I)Ljava/lang/Object;", "(Ljava/util/List;I)Ljava/lang/Object;", "Lkotlin/Function1;", "defaultValue", "elementAtOrElse", "(Ljava/lang/Iterable;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "(Ljava/util/List;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "elementAtOrNull", "predicate", "find", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "findLast", "(Ljava/util/List;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "first", "(Ljava/lang/Iterable;)Ljava/lang/Object;", "firstOrNull", "getOrElse", "getOrNull", "indexOf", "(Ljava/lang/Iterable;Ljava/lang/Object;)I", "(Ljava/util/List;Ljava/lang/Object;)I", "indexOfFirst", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)I", "(Ljava/util/List;Lkotlin/jvm/functions/Function1;)I", "indexOfLast", "last", "lastIndexOf", "lastOrNull", "", "random", "(Ljava/util/Collection;)Ljava/lang/Object;", "Lkotlin/random/Random;", "(Ljava/util/Collection;Lkotlin/random/Random;)Ljava/lang/Object;", "randomOrNull", "single", "singleOrNull", "n", "drop", "(Ljava/lang/Iterable;I)Ljava/util/List;", "dropLast", "(Ljava/util/List;I)Ljava/util/List;", "dropLastWhile", "(Ljava/util/List;Lkotlin/jvm/functions/Function1;)Ljava/util/List;", "dropWhile", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Ljava/util/List;", "filter", "Lkotlin/Function2;", "Lkotlin/ParameterName;", "name", "filterIndexed", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "", "C", "destination", "filterIndexedTo", "(Ljava/lang/Iterable;Ljava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;", "R", "Lkotlin/internal/NoInfer;", "filterIsInstance", "(Ljava/lang/Iterable;)Ljava/util/List;", "filterIsInstanceTo", "(Ljava/lang/Iterable;Ljava/util/Collection;)Ljava/util/Collection;", "filterNot", "", "filterNotNull", "filterNotNullTo", "filterNotTo", "(Ljava/lang/Iterable;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;", "filterTo", "Lkotlin/ranges/IntRange;", "indices", "slice", "(Ljava/util/List;Lkotlin/ranges/IntRange;)Ljava/util/List;", "(Ljava/util/List;Ljava/lang/Iterable;)Ljava/util/List;", "take", "takeLast", "takeLastWhile", "takeWhile", "reversed", "", "", "selector", "", "sortBy", "(Ljava/util/List;Lkotlin/jvm/functions/Function1;)V", "sortByDescending", "sortDescending", "(Ljava/util/List;)V", "sorted", "sortedBy", "sortedByDescending", "sortedDescending", "Ljava/util/Comparator;", "Lkotlin/Comparator;", "comparator", "sortedWith", "(Ljava/lang/Iterable;Ljava/util/Comparator;)Ljava/util/List;", "", "toBooleanArray", "(Ljava/util/Collection;)[Z", "", "", "toByteArray", "(Ljava/util/Collection;)[B", "", "", "toCharArray", "(Ljava/util/Collection;)[C", "", "", "toDoubleArray", "(Ljava/util/Collection;)[D", "", "", "toFloatArray", "(Ljava/util/Collection;)[F", "", "toIntArray", "(Ljava/util/Collection;)[I", "", "", "toLongArray", "(Ljava/util/Collection;)[J", "", "", "toShortArray", "(Ljava/util/Collection;)[S", "K", ExifInterface.GPS_MEASUREMENT_INTERRUPTED, "Lkotlin/Pair;", "transform", "", "associate", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "keySelector", "associateBy", "valueTransform", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "", "M", "associateByTo", "(Ljava/lang/Iterable;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "(Ljava/lang/Iterable;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "associateTo", "valueSelector", "associateWith", "associateWithTo", "toCollection", "Ljava/util/HashSet;", "Lkotlin/collections/HashSet;", "toHashSet", "(Ljava/lang/Iterable;)Ljava/util/HashSet;", "toList", "toMutableList", "(Ljava/util/Collection;)Ljava/util/List;", "", "toSet", "(Ljava/lang/Iterable;)Ljava/util/Set;", "flatMap", "flatMapTo", "groupBy", "groupByTo", "Lkotlin/collections/Grouping;", "groupingBy", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Lkotlin/collections/Grouping;", "map", "mapIndexed", "mapIndexedNotNull", "mapIndexedNotNullTo", "mapIndexedTo", "mapNotNull", "mapNotNullTo", "mapTo", "Lkotlin/collections/IndexedValue;", "withIndex", "(Ljava/lang/Iterable;)Ljava/lang/Iterable;", "distinct", "distinctBy", AdnName.OTHER, "intersect", "(Ljava/lang/Iterable;Ljava/lang/Iterable;)Ljava/util/Set;", "subtract", "", "toMutableSet", "union", "all", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Z", "any", "(Ljava/lang/Iterable;)Z", "count", "(Ljava/lang/Iterable;)I", "(Ljava/util/Collection;)I", "initial", "acc", "operation", "fold", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "Lkotlin/Function3;", "foldIndexed", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "foldRight", "(Ljava/util/List;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "foldRightIndexed", "(Ljava/util/List;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "action", "forEach", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)V", "forEachIndexed", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function2;)V", "max", "(Ljava/lang/Iterable;)Ljava/lang/Double;", "(Ljava/lang/Iterable;)Ljava/lang/Float;", "(Ljava/lang/Iterable;)Ljava/lang/Comparable;", "maxBy", "maxWith", "(Ljava/lang/Iterable;Ljava/util/Comparator;)Ljava/lang/Object;", "min", "minBy", "minWith", a.f5472a, "onEach", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Ljava/lang/Iterable;", ExifInterface.LATITUDE_SOUTH, "reduce", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "reduceIndexed", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "reduceOrNull", "reduceRight", "(Ljava/util/List;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "reduceRightIndexed", "(Ljava/util/List;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "reduceRightOrNull", "scan", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "scanIndexed", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/util/List;", "scanReduce", "scanReduceIndexed", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function3;)Ljava/util/List;", "sumBy", "sumByDouble", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)D", "requireNoNulls", "(Ljava/util/List;)Ljava/util/List;", OapsKey.KEY_SIZE, "chunked", "(Ljava/lang/Iterable;ILkotlin/jvm/functions/Function1;)Ljava/util/List;", "minus", "(Ljava/lang/Iterable;Ljava/lang/Object;)Ljava/util/List;", "", "elements", "(Ljava/lang/Iterable;[Ljava/lang/Object;)Ljava/util/List;", "(Ljava/lang/Iterable;Ljava/lang/Iterable;)Ljava/util/List;", "Lkotlin/sequences/Sequence;", "(Ljava/lang/Iterable;Lkotlin/sequences/Sequence;)Ljava/util/List;", "minusElement", "partition", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Lkotlin/Pair;", "plus", "(Ljava/util/Collection;Ljava/lang/Object;)Ljava/util/List;", "(Ljava/util/Collection;[Ljava/lang/Object;)Ljava/util/List;", "(Ljava/util/Collection;Ljava/lang/Iterable;)Ljava/util/List;", "(Ljava/util/Collection;Lkotlin/sequences/Sequence;)Ljava/util/List;", "plusElement", "step", "partialWindows", "windowed", "(Ljava/lang/Iterable;IIZ)Ljava/util/List;", "(Ljava/lang/Iterable;IIZLkotlin/jvm/functions/Function1;)Ljava/util/List;", "zip", "a", "b", "(Ljava/lang/Iterable;[Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "(Ljava/lang/Iterable;Ljava/lang/Iterable;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "zipWithNext", "Ljava/lang/Appendable;", "Lkotlin/text/Appendable;", ExifInterface.GPS_MEASUREMENT_IN_PROGRESS, "buffer", "", "separator", "prefix", "postfix", "limit", "truncated", "joinTo", "(Ljava/lang/Iterable;Ljava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;", "", "joinToString", "(Ljava/lang/Iterable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/String;", "asIterable", "asSequence", "(Ljava/lang/Iterable;)Lkotlin/sequences/Sequence;", "averageOfByte", "(Ljava/lang/Iterable;)D", "average", "averageOfShort", "averageOfInt", "averageOfLong", "averageOfFloat", "averageOfDouble", "sumOfByte", "sum", "sumOfShort", "sumOfInt", "sumOfLong", "(Ljava/lang/Iterable;)J", "sumOfFloat", "(Ljava/lang/Iterable;)F", "sumOfDouble", "kotlin-stdlib"}, k = 5, mv = {1, 4, 0}, xs = "kotlin/collections/CollectionsKt")
/* loaded from: classes5.dex */
public class CollectionsKt___CollectionsKt extends CollectionsKt___CollectionsJvmKt {
    public static final <T> boolean all(@d Iterable<? extends T> all, @d Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(all, "$this$all");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        if ((all instanceof Collection) && ((Collection) all).isEmpty()) {
            return true;
        }
        Iterator<? extends T> it = all.iterator();
        while (it.hasNext()) {
            if (!predicate.invoke(it.next()).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    public static final <T> boolean any(@d Iterable<? extends T> any) {
        Intrinsics.checkParameterIsNotNull(any, "$this$any");
        return any instanceof Collection ? !((Collection) any).isEmpty() : any.iterator().hasNext();
    }

    /* JADX WARN: Multi-variable type inference failed */
    @InlineOnly
    private static final <T> Iterable<T> asIterable(@d Iterable<? extends T> iterable) {
        return iterable;
    }

    @d
    public static <T> Sequence<T> asSequence(@d final Iterable<? extends T> asSequence) {
        Intrinsics.checkParameterIsNotNull(asSequence, "$this$asSequence");
        return new Sequence<T>() { // from class: kotlin.collections.CollectionsKt___CollectionsKt$asSequence$$inlined$Sequence$1
            @Override // kotlin.sequences.Sequence
            @d
            public Iterator<T> iterator() {
                return asSequence.iterator();
            }
        };
    }

    @d
    public static final <T, K, V> Map<K, V> associate(@d Iterable<? extends T> associate, @d Function1<? super T, ? extends Pair<? extends K, ? extends V>> transform) {
        int mapCapacity;
        int coerceAtLeast;
        Intrinsics.checkParameterIsNotNull(associate, "$this$associate");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(CollectionsKt__IterablesKt.collectionSizeOrDefault(associate, 10));
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        Iterator<? extends T> it = associate.iterator();
        while (it.hasNext()) {
            Pair<? extends K, ? extends V> invoke = transform.invoke(it.next());
            linkedHashMap.put(invoke.getFirst(), invoke.getSecond());
        }
        return linkedHashMap;
    }

    @d
    public static final <T, K> Map<K, T> associateBy(@d Iterable<? extends T> associateBy, @d Function1<? super T, ? extends K> keySelector) {
        int mapCapacity;
        int coerceAtLeast;
        Intrinsics.checkParameterIsNotNull(associateBy, "$this$associateBy");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(CollectionsKt__IterablesKt.collectionSizeOrDefault(associateBy, 10));
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        for (T t : associateBy) {
            linkedHashMap.put(keySelector.invoke(t), t);
        }
        return linkedHashMap;
    }

    @d
    public static final <T, K, M extends Map<? super K, ? super T>> M associateByTo(@d Iterable<? extends T> associateByTo, @d M destination, @d Function1<? super T, ? extends K> keySelector) {
        Intrinsics.checkParameterIsNotNull(associateByTo, "$this$associateByTo");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        for (T t : associateByTo) {
            destination.put(keySelector.invoke(t), t);
        }
        return destination;
    }

    @d
    public static final <T, K, V, M extends Map<? super K, ? super V>> M associateTo(@d Iterable<? extends T> associateTo, @d M destination, @d Function1<? super T, ? extends Pair<? extends K, ? extends V>> transform) {
        Intrinsics.checkParameterIsNotNull(associateTo, "$this$associateTo");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        Iterator<? extends T> it = associateTo.iterator();
        while (it.hasNext()) {
            Pair<? extends K, ? extends V> invoke = transform.invoke(it.next());
            destination.put(invoke.getFirst(), invoke.getSecond());
        }
        return destination;
    }

    @d
    @SinceKotlin(version = "1.3")
    public static final <K, V> Map<K, V> associateWith(@d Iterable<? extends K> associateWith, @d Function1<? super K, ? extends V> valueSelector) {
        int mapCapacity;
        int coerceAtLeast;
        Intrinsics.checkParameterIsNotNull(associateWith, "$this$associateWith");
        Intrinsics.checkParameterIsNotNull(valueSelector, "valueSelector");
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(CollectionsKt__IterablesKt.collectionSizeOrDefault(associateWith, 10));
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        for (K k : associateWith) {
            linkedHashMap.put(k, valueSelector.invoke(k));
        }
        return linkedHashMap;
    }

    @d
    @SinceKotlin(version = "1.3")
    public static final <K, V, M extends Map<? super K, ? super V>> M associateWithTo(@d Iterable<? extends K> associateWithTo, @d M destination, @d Function1<? super K, ? extends V> valueSelector) {
        Intrinsics.checkParameterIsNotNull(associateWithTo, "$this$associateWithTo");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(valueSelector, "valueSelector");
        for (K k : associateWithTo) {
            destination.put(k, valueSelector.invoke(k));
        }
        return destination;
    }

    @JvmName(name = "averageOfByte")
    public static final double averageOfByte(@d Iterable<Byte> average) {
        Intrinsics.checkParameterIsNotNull(average, "$this$average");
        Iterator<Byte> it = average.iterator();
        double d2 = 0.0d;
        int i2 = 0;
        while (it.hasNext()) {
            double byteValue = it.next().byteValue();
            Double.isNaN(byteValue);
            d2 += byteValue;
            i2++;
            if (i2 < 0) {
                CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        if (i2 == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        double d3 = i2;
        Double.isNaN(d3);
        return d2 / d3;
    }

    @JvmName(name = "averageOfDouble")
    public static final double averageOfDouble(@d Iterable<Double> average) {
        Intrinsics.checkParameterIsNotNull(average, "$this$average");
        Iterator<Double> it = average.iterator();
        double d2 = 0.0d;
        int i2 = 0;
        while (it.hasNext()) {
            d2 += it.next().doubleValue();
            i2++;
            if (i2 < 0) {
                CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        if (i2 == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        double d3 = i2;
        Double.isNaN(d3);
        return d2 / d3;
    }

    @JvmName(name = "averageOfFloat")
    public static final double averageOfFloat(@d Iterable<Float> average) {
        Intrinsics.checkParameterIsNotNull(average, "$this$average");
        Iterator<Float> it = average.iterator();
        double d2 = 0.0d;
        int i2 = 0;
        while (it.hasNext()) {
            double floatValue = it.next().floatValue();
            Double.isNaN(floatValue);
            d2 += floatValue;
            i2++;
            if (i2 < 0) {
                CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        if (i2 == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        double d3 = i2;
        Double.isNaN(d3);
        return d2 / d3;
    }

    @JvmName(name = "averageOfInt")
    public static final double averageOfInt(@d Iterable<Integer> average) {
        Intrinsics.checkParameterIsNotNull(average, "$this$average");
        Iterator<Integer> it = average.iterator();
        double d2 = 0.0d;
        int i2 = 0;
        while (it.hasNext()) {
            double intValue = it.next().intValue();
            Double.isNaN(intValue);
            d2 += intValue;
            i2++;
            if (i2 < 0) {
                CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        if (i2 == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        double d3 = i2;
        Double.isNaN(d3);
        return d2 / d3;
    }

    @JvmName(name = "averageOfLong")
    public static final double averageOfLong(@d Iterable<Long> average) {
        Intrinsics.checkParameterIsNotNull(average, "$this$average");
        Iterator<Long> it = average.iterator();
        double d2 = 0.0d;
        int i2 = 0;
        while (it.hasNext()) {
            double longValue = it.next().longValue();
            Double.isNaN(longValue);
            d2 += longValue;
            i2++;
            if (i2 < 0) {
                CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        if (i2 == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        double d3 = i2;
        Double.isNaN(d3);
        return d2 / d3;
    }

    @JvmName(name = "averageOfShort")
    public static final double averageOfShort(@d Iterable<Short> average) {
        Intrinsics.checkParameterIsNotNull(average, "$this$average");
        Iterator<Short> it = average.iterator();
        double d2 = 0.0d;
        int i2 = 0;
        while (it.hasNext()) {
            double shortValue = it.next().shortValue();
            Double.isNaN(shortValue);
            d2 += shortValue;
            i2++;
            if (i2 < 0) {
                CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        if (i2 == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        double d3 = i2;
        Double.isNaN(d3);
        return d2 / d3;
    }

    @d
    @SinceKotlin(version = "1.2")
    public static final <T> List<List<T>> chunked(@d Iterable<? extends T> chunked, int i2) {
        Intrinsics.checkParameterIsNotNull(chunked, "$this$chunked");
        return windowed(chunked, i2, i2, true);
    }

    @InlineOnly
    private static final <T> T component1(@d List<? extends T> component1) {
        Intrinsics.checkParameterIsNotNull(component1, "$this$component1");
        return component1.get(0);
    }

    @InlineOnly
    private static final <T> T component2(@d List<? extends T> component2) {
        Intrinsics.checkParameterIsNotNull(component2, "$this$component2");
        return component2.get(1);
    }

    @InlineOnly
    private static final <T> T component3(@d List<? extends T> component3) {
        Intrinsics.checkParameterIsNotNull(component3, "$this$component3");
        return component3.get(2);
    }

    @InlineOnly
    private static final <T> T component4(@d List<? extends T> component4) {
        Intrinsics.checkParameterIsNotNull(component4, "$this$component4");
        return component4.get(3);
    }

    @InlineOnly
    private static final <T> T component5(@d List<? extends T> component5) {
        Intrinsics.checkParameterIsNotNull(component5, "$this$component5");
        return component5.get(4);
    }

    public static final <T> boolean contains(@d Iterable<? extends T> contains, T t) {
        Intrinsics.checkParameterIsNotNull(contains, "$this$contains");
        return contains instanceof Collection ? ((Collection) contains).contains(t) : indexOf(contains, t) >= 0;
    }

    public static final <T> int count(@d Iterable<? extends T> count) {
        Intrinsics.checkParameterIsNotNull(count, "$this$count");
        if (count instanceof Collection) {
            return ((Collection) count).size();
        }
        int i2 = 0;
        Iterator<? extends T> it = count.iterator();
        while (it.hasNext()) {
            it.next();
            i2++;
            if (i2 < 0) {
                CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        return i2;
    }

    @d
    public static final <T> List<T> distinct(@d Iterable<? extends T> distinct) {
        Intrinsics.checkParameterIsNotNull(distinct, "$this$distinct");
        return toList(toMutableSet(distinct));
    }

    @d
    public static final <T, K> List<T> distinctBy(@d Iterable<? extends T> distinctBy, @d Function1<? super T, ? extends K> selector) {
        Intrinsics.checkParameterIsNotNull(distinctBy, "$this$distinctBy");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        HashSet hashSet = new HashSet();
        ArrayList arrayList = new ArrayList();
        for (T t : distinctBy) {
            if (hashSet.add(selector.invoke(t))) {
                arrayList.add(t);
            }
        }
        return arrayList;
    }

    @d
    public static <T> List<T> drop(@d Iterable<? extends T> drop, int i2) {
        ArrayList arrayList;
        Intrinsics.checkParameterIsNotNull(drop, "$this$drop");
        int i3 = 0;
        if (!(i2 >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
        }
        if (i2 == 0) {
            return toList(drop);
        }
        if (drop instanceof Collection) {
            Collection collection = (Collection) drop;
            int size = collection.size() - i2;
            if (size <= 0) {
                return CollectionsKt__CollectionsKt.emptyList();
            }
            if (size == 1) {
                return CollectionsKt__CollectionsJVMKt.listOf(last(drop));
            }
            arrayList = new ArrayList(size);
            if (drop instanceof List) {
                if (drop instanceof RandomAccess) {
                    int size2 = collection.size();
                    while (i2 < size2) {
                        arrayList.add(((List) drop).get(i2));
                        i2++;
                    }
                } else {
                    ListIterator listIterator = ((List) drop).listIterator(i2);
                    while (listIterator.hasNext()) {
                        arrayList.add(listIterator.next());
                    }
                }
                return arrayList;
            }
        } else {
            arrayList = new ArrayList();
        }
        for (T t : drop) {
            if (i3 >= i2) {
                arrayList.add(t);
            } else {
                i3++;
            }
        }
        return CollectionsKt__CollectionsKt.optimizeReadOnlyList(arrayList);
    }

    @d
    public static final <T> List<T> dropLast(@d List<? extends T> dropLast, int i2) {
        int coerceAtLeast;
        Intrinsics.checkParameterIsNotNull(dropLast, "$this$dropLast");
        if (i2 >= 0) {
            coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(dropLast.size() - i2, 0);
            return take(dropLast, coerceAtLeast);
        }
        throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
    }

    @d
    public static final <T> List<T> dropLastWhile(@d List<? extends T> dropLastWhile, @d Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(dropLastWhile, "$this$dropLastWhile");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        if (!dropLastWhile.isEmpty()) {
            ListIterator<? extends T> listIterator = dropLastWhile.listIterator(dropLastWhile.size());
            while (listIterator.hasPrevious()) {
                if (!predicate.invoke(listIterator.previous()).booleanValue()) {
                    return take(dropLastWhile, listIterator.nextIndex() + 1);
                }
            }
        }
        return CollectionsKt__CollectionsKt.emptyList();
    }

    @d
    public static final <T> List<T> dropWhile(@d Iterable<? extends T> dropWhile, @d Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(dropWhile, "$this$dropWhile");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        ArrayList arrayList = new ArrayList();
        boolean z = false;
        for (T t : dropWhile) {
            if (z) {
                arrayList.add(t);
            } else if (!predicate.invoke(t).booleanValue()) {
                arrayList.add(t);
                z = true;
            }
        }
        return arrayList;
    }

    public static final <T> T elementAt(@d Iterable<? extends T> elementAt, final int i2) {
        Intrinsics.checkParameterIsNotNull(elementAt, "$this$elementAt");
        return elementAt instanceof List ? (T) ((List) elementAt).get(i2) : (T) elementAtOrElse(elementAt, i2, new Function1() { // from class: kotlin.collections.CollectionsKt___CollectionsKt$elementAt$1
            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            {
                super(1);
            }

            @Override // kotlin.jvm.functions.Function1
            public /* bridge */ /* synthetic */ Object invoke(Object obj) {
                return invoke(((Number) obj).intValue());
            }

            @d
            public final Void invoke(int i3) {
                throw new IndexOutOfBoundsException("Collection doesn't contain element at index " + i2 + '.');
            }
        });
    }

    public static final <T> T elementAtOrElse(@d Iterable<? extends T> elementAtOrElse, int i2, @d Function1<? super Integer, ? extends T> defaultValue) {
        Intrinsics.checkParameterIsNotNull(elementAtOrElse, "$this$elementAtOrElse");
        Intrinsics.checkParameterIsNotNull(defaultValue, "defaultValue");
        if (elementAtOrElse instanceof List) {
            List list = (List) elementAtOrElse;
            return (i2 < 0 || i2 > CollectionsKt__CollectionsKt.getLastIndex(list)) ? defaultValue.invoke(Integer.valueOf(i2)) : (T) list.get(i2);
        }
        if (i2 < 0) {
            return defaultValue.invoke(Integer.valueOf(i2));
        }
        int i3 = 0;
        for (T t : elementAtOrElse) {
            int i4 = i3 + 1;
            if (i2 == i3) {
                return t;
            }
            i3 = i4;
        }
        return defaultValue.invoke(Integer.valueOf(i2));
    }

    @e
    public static final <T> T elementAtOrNull(@d Iterable<? extends T> elementAtOrNull, int i2) {
        Intrinsics.checkParameterIsNotNull(elementAtOrNull, "$this$elementAtOrNull");
        if (elementAtOrNull instanceof List) {
            return (T) getOrNull((List) elementAtOrNull, i2);
        }
        if (i2 < 0) {
            return null;
        }
        int i3 = 0;
        for (T t : elementAtOrNull) {
            int i4 = i3 + 1;
            if (i2 == i3) {
                return t;
            }
            i3 = i4;
        }
        return null;
    }

    @d
    public static final <T> List<T> filter(@d Iterable<? extends T> filter, @d Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(filter, "$this$filter");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        ArrayList arrayList = new ArrayList();
        for (T t : filter) {
            if (predicate.invoke(t).booleanValue()) {
                arrayList.add(t);
            }
        }
        return arrayList;
    }

    @d
    public static final <T> List<T> filterIndexed(@d Iterable<? extends T> filterIndexed, @d Function2<? super Integer, ? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(filterIndexed, "$this$filterIndexed");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        ArrayList arrayList = new ArrayList();
        int i2 = 0;
        for (T t : filterIndexed) {
            int i3 = i2 + 1;
            if (i2 < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            if (predicate.invoke(Integer.valueOf(i2), t).booleanValue()) {
                arrayList.add(t);
            }
            i2 = i3;
        }
        return arrayList;
    }

    @d
    public static final <T, C extends Collection<? super T>> C filterIndexedTo(@d Iterable<? extends T> filterIndexedTo, @d C destination, @d Function2<? super Integer, ? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(filterIndexedTo, "$this$filterIndexedTo");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        int i2 = 0;
        for (T t : filterIndexedTo) {
            int i3 = i2 + 1;
            if (i2 < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            if (predicate.invoke(Integer.valueOf(i2), t).booleanValue()) {
                destination.add(t);
            }
            i2 = i3;
        }
        return destination;
    }

    @d
    public static final /* synthetic */ <R> List<R> filterIsInstance(@d Iterable<?> filterIsInstance) {
        Intrinsics.checkParameterIsNotNull(filterIsInstance, "$this$filterIsInstance");
        ArrayList arrayList = new ArrayList();
        for (Object obj : filterIsInstance) {
            Intrinsics.reifiedOperationMarker(3, "R");
            if (obj instanceof Object) {
                arrayList.add(obj);
            }
        }
        return arrayList;
    }

    @d
    public static final /* synthetic */ <R, C extends Collection<? super R>> C filterIsInstanceTo(@d Iterable<?> filterIsInstanceTo, @d C destination) {
        Intrinsics.checkParameterIsNotNull(filterIsInstanceTo, "$this$filterIsInstanceTo");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        for (Object obj : filterIsInstanceTo) {
            Intrinsics.reifiedOperationMarker(3, "R");
            if (obj instanceof Object) {
                destination.add(obj);
            }
        }
        return destination;
    }

    @d
    public static final <T> List<T> filterNot(@d Iterable<? extends T> filterNot, @d Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(filterNot, "$this$filterNot");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        ArrayList arrayList = new ArrayList();
        for (T t : filterNot) {
            if (!predicate.invoke(t).booleanValue()) {
                arrayList.add(t);
            }
        }
        return arrayList;
    }

    @d
    public static final <T> List<T> filterNotNull(@d Iterable<? extends T> filterNotNull) {
        Intrinsics.checkParameterIsNotNull(filterNotNull, "$this$filterNotNull");
        return (List) filterNotNullTo(filterNotNull, new ArrayList());
    }

    @d
    public static final <C extends Collection<? super T>, T> C filterNotNullTo(@d Iterable<? extends T> filterNotNullTo, @d C destination) {
        Intrinsics.checkParameterIsNotNull(filterNotNullTo, "$this$filterNotNullTo");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        for (T t : filterNotNullTo) {
            if (t != null) {
                destination.add(t);
            }
        }
        return destination;
    }

    @d
    public static final <T, C extends Collection<? super T>> C filterNotTo(@d Iterable<? extends T> filterNotTo, @d C destination, @d Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(filterNotTo, "$this$filterNotTo");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        for (T t : filterNotTo) {
            if (!predicate.invoke(t).booleanValue()) {
                destination.add(t);
            }
        }
        return destination;
    }

    @d
    public static final <T, C extends Collection<? super T>> C filterTo(@d Iterable<? extends T> filterTo, @d C destination, @d Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(filterTo, "$this$filterTo");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        for (T t : filterTo) {
            if (predicate.invoke(t).booleanValue()) {
                destination.add(t);
            }
        }
        return destination;
    }

    /* JADX WARN: Type inference failed for: r0v2, types: [T, java.lang.Object] */
    @InlineOnly
    private static final <T> T find(@d Iterable<? extends T> iterable, Function1<? super T, Boolean> function1) {
        for (T t : iterable) {
            if (function1.invoke(t).booleanValue()) {
                return t;
            }
        }
        return null;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r1v1, types: [java.lang.Object] */
    @InlineOnly
    private static final <T> T findLast(@d Iterable<? extends T> iterable, Function1<? super T, Boolean> function1) {
        T t = null;
        for (T t2 : iterable) {
            if (function1.invoke(t2).booleanValue()) {
                t = t2;
            }
        }
        return t;
    }

    public static final <T> T first(@d Iterable<? extends T> first) {
        Intrinsics.checkParameterIsNotNull(first, "$this$first");
        if (first instanceof List) {
            return (T) first((List) first);
        }
        Iterator<? extends T> it = first.iterator();
        if (it.hasNext()) {
            return it.next();
        }
        throw new NoSuchElementException("Collection is empty.");
    }

    @e
    public static final <T> T firstOrNull(@d Iterable<? extends T> firstOrNull) {
        Intrinsics.checkParameterIsNotNull(firstOrNull, "$this$firstOrNull");
        if (firstOrNull instanceof List) {
            List list = (List) firstOrNull;
            if (list.isEmpty()) {
                return null;
            }
            return (T) list.get(0);
        }
        Iterator<? extends T> it = firstOrNull.iterator();
        if (it.hasNext()) {
            return it.next();
        }
        return null;
    }

    @d
    public static final <T, R> List<R> flatMap(@d Iterable<? extends T> flatMap, @d Function1<? super T, ? extends Iterable<? extends R>> transform) {
        Intrinsics.checkParameterIsNotNull(flatMap, "$this$flatMap");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        ArrayList arrayList = new ArrayList();
        Iterator<? extends T> it = flatMap.iterator();
        while (it.hasNext()) {
            CollectionsKt__MutableCollectionsKt.addAll(arrayList, transform.invoke(it.next()));
        }
        return arrayList;
    }

    @d
    public static final <T, R, C extends Collection<? super R>> C flatMapTo(@d Iterable<? extends T> flatMapTo, @d C destination, @d Function1<? super T, ? extends Iterable<? extends R>> transform) {
        Intrinsics.checkParameterIsNotNull(flatMapTo, "$this$flatMapTo");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        Iterator<? extends T> it = flatMapTo.iterator();
        while (it.hasNext()) {
            CollectionsKt__MutableCollectionsKt.addAll(destination, transform.invoke(it.next()));
        }
        return destination;
    }

    public static final <T, R> R fold(@d Iterable<? extends T> fold, R r, @d Function2<? super R, ? super T, ? extends R> operation) {
        Intrinsics.checkParameterIsNotNull(fold, "$this$fold");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        Iterator<? extends T> it = fold.iterator();
        while (it.hasNext()) {
            r = operation.invoke(r, it.next());
        }
        return r;
    }

    public static final <T, R> R foldIndexed(@d Iterable<? extends T> foldIndexed, R r, @d Function3<? super Integer, ? super R, ? super T, ? extends R> operation) {
        Intrinsics.checkParameterIsNotNull(foldIndexed, "$this$foldIndexed");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        int i2 = 0;
        for (T t : foldIndexed) {
            int i3 = i2 + 1;
            if (i2 < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            r = operation.invoke(Integer.valueOf(i2), r, t);
            i2 = i3;
        }
        return r;
    }

    public static final <T, R> R foldRight(@d List<? extends T> foldRight, R r, @d Function2<? super T, ? super R, ? extends R> operation) {
        Intrinsics.checkParameterIsNotNull(foldRight, "$this$foldRight");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        if (!foldRight.isEmpty()) {
            ListIterator<? extends T> listIterator = foldRight.listIterator(foldRight.size());
            while (listIterator.hasPrevious()) {
                r = operation.invoke(listIterator.previous(), r);
            }
        }
        return r;
    }

    public static final <T, R> R foldRightIndexed(@d List<? extends T> foldRightIndexed, R r, @d Function3<? super Integer, ? super T, ? super R, ? extends R> operation) {
        Intrinsics.checkParameterIsNotNull(foldRightIndexed, "$this$foldRightIndexed");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        if (!foldRightIndexed.isEmpty()) {
            ListIterator<? extends T> listIterator = foldRightIndexed.listIterator(foldRightIndexed.size());
            while (listIterator.hasPrevious()) {
                r = operation.invoke(Integer.valueOf(listIterator.previousIndex()), listIterator.previous(), r);
            }
        }
        return r;
    }

    @HidesMembers
    public static final <T> void forEach(@d Iterable<? extends T> forEach, @d Function1<? super T, Unit> action) {
        Intrinsics.checkParameterIsNotNull(forEach, "$this$forEach");
        Intrinsics.checkParameterIsNotNull(action, "action");
        Iterator<? extends T> it = forEach.iterator();
        while (it.hasNext()) {
            action.invoke(it.next());
        }
    }

    public static final <T> void forEachIndexed(@d Iterable<? extends T> forEachIndexed, @d Function2<? super Integer, ? super T, Unit> action) {
        Intrinsics.checkParameterIsNotNull(forEachIndexed, "$this$forEachIndexed");
        Intrinsics.checkParameterIsNotNull(action, "action");
        int i2 = 0;
        for (T t : forEachIndexed) {
            int i3 = i2 + 1;
            if (i2 < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            action.invoke(Integer.valueOf(i2), t);
            i2 = i3;
        }
    }

    @InlineOnly
    private static final <T> T getOrElse(@d List<? extends T> list, int i2, Function1<? super Integer, ? extends T> function1) {
        return (i2 < 0 || i2 > CollectionsKt__CollectionsKt.getLastIndex(list)) ? function1.invoke(Integer.valueOf(i2)) : list.get(i2);
    }

    @e
    public static final <T> T getOrNull(@d List<? extends T> getOrNull, int i2) {
        Intrinsics.checkParameterIsNotNull(getOrNull, "$this$getOrNull");
        if (i2 < 0 || i2 > CollectionsKt__CollectionsKt.getLastIndex(getOrNull)) {
            return null;
        }
        return getOrNull.get(i2);
    }

    @d
    public static final <T, K> Map<K, List<T>> groupBy(@d Iterable<? extends T> groupBy, @d Function1<? super T, ? extends K> keySelector) {
        Intrinsics.checkParameterIsNotNull(groupBy, "$this$groupBy");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        for (T t : groupBy) {
            K invoke = keySelector.invoke(t);
            Object obj = linkedHashMap.get(invoke);
            if (obj == null) {
                obj = new ArrayList();
                linkedHashMap.put(invoke, obj);
            }
            ((List) obj).add(t);
        }
        return linkedHashMap;
    }

    @d
    public static final <T, K, M extends Map<? super K, List<T>>> M groupByTo(@d Iterable<? extends T> groupByTo, @d M destination, @d Function1<? super T, ? extends K> keySelector) {
        Intrinsics.checkParameterIsNotNull(groupByTo, "$this$groupByTo");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        for (T t : groupByTo) {
            K invoke = keySelector.invoke(t);
            Object obj = destination.get(invoke);
            if (obj == null) {
                obj = new ArrayList();
                destination.put(invoke, obj);
            }
            ((List) obj).add(t);
        }
        return destination;
    }

    @d
    @SinceKotlin(version = "1.1")
    public static final <T, K> Grouping<T, K> groupingBy(@d final Iterable<? extends T> groupingBy, @d final Function1<? super T, ? extends K> keySelector) {
        Intrinsics.checkParameterIsNotNull(groupingBy, "$this$groupingBy");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        return new Grouping<T, K>() { // from class: kotlin.collections.CollectionsKt___CollectionsKt$groupingBy$1
            @Override // kotlin.collections.Grouping
            public K keyOf(T element) {
                return (K) keySelector.invoke(element);
            }

            @Override // kotlin.collections.Grouping
            @d
            public Iterator<T> sourceIterator() {
                return groupingBy.iterator();
            }
        };
    }

    public static final <T> int indexOf(@d Iterable<? extends T> indexOf, T t) {
        Intrinsics.checkParameterIsNotNull(indexOf, "$this$indexOf");
        if (indexOf instanceof List) {
            return ((List) indexOf).indexOf(t);
        }
        int i2 = 0;
        for (T t2 : indexOf) {
            if (i2 < 0) {
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            if (Intrinsics.areEqual(t, t2)) {
                return i2;
            }
            i2++;
        }
        return -1;
    }

    public static final <T> int indexOfFirst(@d Iterable<? extends T> indexOfFirst, @d Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(indexOfFirst, "$this$indexOfFirst");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        int i2 = 0;
        for (T t : indexOfFirst) {
            if (i2 < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            if (predicate.invoke(t).booleanValue()) {
                return i2;
            }
            i2++;
        }
        return -1;
    }

    public static final <T> int indexOfLast(@d Iterable<? extends T> indexOfLast, @d Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(indexOfLast, "$this$indexOfLast");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        int i2 = -1;
        int i3 = 0;
        for (T t : indexOfLast) {
            if (i3 < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            if (predicate.invoke(t).booleanValue()) {
                i2 = i3;
            }
            i3++;
        }
        return i2;
    }

    @d
    public static final <T> Set<T> intersect(@d Iterable<? extends T> intersect, @d Iterable<? extends T> other) {
        Intrinsics.checkParameterIsNotNull(intersect, "$this$intersect");
        Intrinsics.checkParameterIsNotNull(other, "other");
        Set<T> mutableSet = toMutableSet(intersect);
        CollectionsKt__MutableCollectionsKt.retainAll(mutableSet, other);
        return mutableSet;
    }

    @d
    public static final <T, A extends Appendable> A joinTo(@d Iterable<? extends T> joinTo, @d A buffer, @d CharSequence separator, @d CharSequence prefix, @d CharSequence postfix, int i2, @d CharSequence truncated, @e Function1<? super T, ? extends CharSequence> function1) {
        Intrinsics.checkParameterIsNotNull(joinTo, "$this$joinTo");
        Intrinsics.checkParameterIsNotNull(buffer, "buffer");
        Intrinsics.checkParameterIsNotNull(separator, "separator");
        Intrinsics.checkParameterIsNotNull(prefix, "prefix");
        Intrinsics.checkParameterIsNotNull(postfix, "postfix");
        Intrinsics.checkParameterIsNotNull(truncated, "truncated");
        buffer.append(prefix);
        int i3 = 0;
        for (T t : joinTo) {
            i3++;
            if (i3 > 1) {
                buffer.append(separator);
            }
            if (i2 >= 0 && i3 > i2) {
                break;
            }
            StringsKt__AppendableKt.appendElement(buffer, t, function1);
        }
        if (i2 >= 0 && i3 > i2) {
            buffer.append(truncated);
        }
        buffer.append(postfix);
        return buffer;
    }

    @d
    public static final <T> String joinToString(@d Iterable<? extends T> joinToString, @d CharSequence separator, @d CharSequence prefix, @d CharSequence postfix, int i2, @d CharSequence truncated, @e Function1<? super T, ? extends CharSequence> function1) {
        Intrinsics.checkParameterIsNotNull(joinToString, "$this$joinToString");
        Intrinsics.checkParameterIsNotNull(separator, "separator");
        Intrinsics.checkParameterIsNotNull(prefix, "prefix");
        Intrinsics.checkParameterIsNotNull(postfix, "postfix");
        Intrinsics.checkParameterIsNotNull(truncated, "truncated");
        String sb = ((StringBuilder) joinTo(joinToString, new StringBuilder(), separator, prefix, postfix, i2, truncated, function1)).toString();
        Intrinsics.checkExpressionValueIsNotNull(sb, "joinTo(StringBuilder(), …ed, transform).toString()");
        return sb;
    }

    public static /* synthetic */ String joinToString$default(Iterable iterable, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int i2, CharSequence charSequence4, Function1 function1, int i3, Object obj) {
        if ((i3 & 1) != 0) {
            charSequence = ", ";
        }
        CharSequence charSequence5 = (i3 & 2) != 0 ? "" : charSequence2;
        CharSequence charSequence6 = (i3 & 4) == 0 ? charSequence3 : "";
        int i4 = (i3 & 8) != 0 ? -1 : i2;
        if ((i3 & 16) != 0) {
            charSequence4 = "...";
        }
        CharSequence charSequence7 = charSequence4;
        if ((i3 & 32) != 0) {
            function1 = null;
        }
        return joinToString(iterable, charSequence, charSequence5, charSequence6, i4, charSequence7, function1);
    }

    public static final <T> T last(@d Iterable<? extends T> last) {
        Intrinsics.checkParameterIsNotNull(last, "$this$last");
        if (last instanceof List) {
            return (T) CollectionsKt.last((List) last);
        }
        Iterator<? extends T> it = last.iterator();
        if (!it.hasNext()) {
            throw new NoSuchElementException("Collection is empty.");
        }
        T next = it.next();
        while (it.hasNext()) {
            next = it.next();
        }
        return next;
    }

    public static final <T> int lastIndexOf(@d Iterable<? extends T> lastIndexOf, T t) {
        Intrinsics.checkParameterIsNotNull(lastIndexOf, "$this$lastIndexOf");
        if (lastIndexOf instanceof List) {
            return ((List) lastIndexOf).lastIndexOf(t);
        }
        int i2 = -1;
        int i3 = 0;
        for (T t2 : lastIndexOf) {
            if (i3 < 0) {
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            if (Intrinsics.areEqual(t, t2)) {
                i2 = i3;
            }
            i3++;
        }
        return i2;
    }

    @e
    public static final <T> T lastOrNull(@d Iterable<? extends T> lastOrNull) {
        Intrinsics.checkParameterIsNotNull(lastOrNull, "$this$lastOrNull");
        if (lastOrNull instanceof List) {
            List list = (List) lastOrNull;
            if (list.isEmpty()) {
                return null;
            }
            return (T) list.get(list.size() - 1);
        }
        Iterator<? extends T> it = lastOrNull.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        while (it.hasNext()) {
            next = it.next();
        }
        return next;
    }

    @d
    public static final <T, R> List<R> map(@d Iterable<? extends T> map, @d Function1<? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull(map, "$this$map");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        ArrayList arrayList = new ArrayList(CollectionsKt__IterablesKt.collectionSizeOrDefault(map, 10));
        Iterator<? extends T> it = map.iterator();
        while (it.hasNext()) {
            arrayList.add(transform.invoke(it.next()));
        }
        return arrayList;
    }

    @d
    public static final <T, R> List<R> mapIndexed(@d Iterable<? extends T> mapIndexed, @d Function2<? super Integer, ? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull(mapIndexed, "$this$mapIndexed");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        ArrayList arrayList = new ArrayList(CollectionsKt__IterablesKt.collectionSizeOrDefault(mapIndexed, 10));
        int i2 = 0;
        for (T t : mapIndexed) {
            int i3 = i2 + 1;
            if (i2 < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            arrayList.add(transform.invoke(Integer.valueOf(i2), t));
            i2 = i3;
        }
        return arrayList;
    }

    @d
    public static final <T, R> List<R> mapIndexedNotNull(@d Iterable<? extends T> mapIndexedNotNull, @d Function2<? super Integer, ? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull(mapIndexedNotNull, "$this$mapIndexedNotNull");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        ArrayList arrayList = new ArrayList();
        int i2 = 0;
        for (T t : mapIndexedNotNull) {
            int i3 = i2 + 1;
            if (i2 < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            R invoke = transform.invoke(Integer.valueOf(i2), t);
            if (invoke != null) {
                arrayList.add(invoke);
            }
            i2 = i3;
        }
        return arrayList;
    }

    @d
    public static final <T, R, C extends Collection<? super R>> C mapIndexedNotNullTo(@d Iterable<? extends T> mapIndexedNotNullTo, @d C destination, @d Function2<? super Integer, ? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull(mapIndexedNotNullTo, "$this$mapIndexedNotNullTo");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        int i2 = 0;
        for (T t : mapIndexedNotNullTo) {
            int i3 = i2 + 1;
            if (i2 < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            R invoke = transform.invoke(Integer.valueOf(i2), t);
            if (invoke != null) {
                destination.add(invoke);
            }
            i2 = i3;
        }
        return destination;
    }

    @d
    public static final <T, R, C extends Collection<? super R>> C mapIndexedTo(@d Iterable<? extends T> mapIndexedTo, @d C destination, @d Function2<? super Integer, ? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull(mapIndexedTo, "$this$mapIndexedTo");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        int i2 = 0;
        for (T t : mapIndexedTo) {
            int i3 = i2 + 1;
            if (i2 < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            destination.add(transform.invoke(Integer.valueOf(i2), t));
            i2 = i3;
        }
        return destination;
    }

    @d
    public static final <T, R> List<R> mapNotNull(@d Iterable<? extends T> mapNotNull, @d Function1<? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull(mapNotNull, "$this$mapNotNull");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        ArrayList arrayList = new ArrayList();
        Iterator<? extends T> it = mapNotNull.iterator();
        while (it.hasNext()) {
            R invoke = transform.invoke(it.next());
            if (invoke != null) {
                arrayList.add(invoke);
            }
        }
        return arrayList;
    }

    @d
    public static final <T, R, C extends Collection<? super R>> C mapNotNullTo(@d Iterable<? extends T> mapNotNullTo, @d C destination, @d Function1<? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull(mapNotNullTo, "$this$mapNotNullTo");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        Iterator<? extends T> it = mapNotNullTo.iterator();
        while (it.hasNext()) {
            R invoke = transform.invoke(it.next());
            if (invoke != null) {
                destination.add(invoke);
            }
        }
        return destination;
    }

    @d
    public static final <T, R, C extends Collection<? super R>> C mapTo(@d Iterable<? extends T> mapTo, @d C destination, @d Function1<? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull(mapTo, "$this$mapTo");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        Iterator<? extends T> it = mapTo.iterator();
        while (it.hasNext()) {
            destination.add(transform.invoke(it.next()));
        }
        return destination;
    }

    @e
    @SinceKotlin(version = "1.1")
    /* renamed from: max */
    public static final Double m398max(@d Iterable<Double> max) {
        Intrinsics.checkParameterIsNotNull(max, "$this$max");
        Iterator<Double> it = max.iterator();
        if (!it.hasNext()) {
            return null;
        }
        double doubleValue = it.next().doubleValue();
        if (Double.isNaN(doubleValue)) {
            return Double.valueOf(doubleValue);
        }
        while (it.hasNext()) {
            double doubleValue2 = it.next().doubleValue();
            if (Double.isNaN(doubleValue2)) {
                return Double.valueOf(doubleValue2);
            }
            if (doubleValue < doubleValue2) {
                doubleValue = doubleValue2;
            }
        }
        return Double.valueOf(doubleValue);
    }

    /* JADX WARN: Type inference failed for: r0v10 */
    /* JADX WARN: Type inference failed for: r0v11 */
    /* JADX WARN: Type inference failed for: r0v3, types: [T, java.lang.Object] */
    /* JADX WARN: Type inference failed for: r0v4 */
    /* JADX WARN: Type inference failed for: r0v5, types: [T] */
    @e
    public static final <T, R extends Comparable<? super R>> T maxBy(@d Iterable<? extends T> maxBy, @d Function1<? super T, ? extends R> selector) {
        Intrinsics.checkParameterIsNotNull(maxBy, "$this$maxBy");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        Iterator<? extends T> it = maxBy.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        if (!it.hasNext()) {
            return next;
        }
        R invoke = selector.invoke(next);
        do {
            T next2 = it.next();
            R invoke2 = selector.invoke(next2);
            next = next;
            if (invoke.compareTo(invoke2) < 0) {
                invoke = invoke2;
                next = next2;
            }
        } while (it.hasNext());
        return (T) next;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @e
    public static final <T> T maxWith(@d Iterable<? extends T> maxWith, @d Comparator<? super T> comparator) {
        Intrinsics.checkParameterIsNotNull(maxWith, "$this$maxWith");
        Intrinsics.checkParameterIsNotNull(comparator, "comparator");
        Iterator<? extends T> it = maxWith.iterator();
        if (!it.hasNext()) {
            return null;
        }
        Object obj = (T) it.next();
        while (it.hasNext()) {
            Object obj2 = (T) it.next();
            if (comparator.compare(obj, obj2) < 0) {
                obj = (T) obj2;
            }
        }
        return (T) obj;
    }

    @e
    @SinceKotlin(version = "1.1")
    /* renamed from: min */
    public static final Double m400min(@d Iterable<Double> min) {
        Intrinsics.checkParameterIsNotNull(min, "$this$min");
        Iterator<Double> it = min.iterator();
        if (!it.hasNext()) {
            return null;
        }
        double doubleValue = it.next().doubleValue();
        if (Double.isNaN(doubleValue)) {
            return Double.valueOf(doubleValue);
        }
        while (it.hasNext()) {
            double doubleValue2 = it.next().doubleValue();
            if (Double.isNaN(doubleValue2)) {
                return Double.valueOf(doubleValue2);
            }
            if (doubleValue > doubleValue2) {
                doubleValue = doubleValue2;
            }
        }
        return Double.valueOf(doubleValue);
    }

    /* JADX WARN: Type inference failed for: r0v10 */
    /* JADX WARN: Type inference failed for: r0v11 */
    /* JADX WARN: Type inference failed for: r0v3, types: [T, java.lang.Object] */
    /* JADX WARN: Type inference failed for: r0v4 */
    /* JADX WARN: Type inference failed for: r0v5, types: [T] */
    @e
    public static final <T, R extends Comparable<? super R>> T minBy(@d Iterable<? extends T> minBy, @d Function1<? super T, ? extends R> selector) {
        Intrinsics.checkParameterIsNotNull(minBy, "$this$minBy");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        Iterator<? extends T> it = minBy.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        if (!it.hasNext()) {
            return next;
        }
        R invoke = selector.invoke(next);
        do {
            T next2 = it.next();
            R invoke2 = selector.invoke(next2);
            next = next;
            if (invoke.compareTo(invoke2) > 0) {
                invoke = invoke2;
                next = next2;
            }
        } while (it.hasNext());
        return (T) next;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @e
    public static final <T> T minWith(@d Iterable<? extends T> minWith, @d Comparator<? super T> comparator) {
        Intrinsics.checkParameterIsNotNull(minWith, "$this$minWith");
        Intrinsics.checkParameterIsNotNull(comparator, "comparator");
        Iterator<? extends T> it = minWith.iterator();
        if (!it.hasNext()) {
            return null;
        }
        Object obj = (T) it.next();
        while (it.hasNext()) {
            Object obj2 = (T) it.next();
            if (comparator.compare(obj, obj2) > 0) {
                obj = (T) obj2;
            }
        }
        return (T) obj;
    }

    @d
    public static final <T> List<T> minus(@d Iterable<? extends T> minus, T t) {
        Intrinsics.checkParameterIsNotNull(minus, "$this$minus");
        ArrayList arrayList = new ArrayList(CollectionsKt__IterablesKt.collectionSizeOrDefault(minus, 10));
        boolean z = false;
        for (T t2 : minus) {
            boolean z2 = true;
            if (!z && Intrinsics.areEqual(t2, t)) {
                z = true;
                z2 = false;
            }
            if (z2) {
                arrayList.add(t2);
            }
        }
        return arrayList;
    }

    @InlineOnly
    private static final <T> List<T> minusElement(@d Iterable<? extends T> iterable, T t) {
        return minus(iterable, t);
    }

    public static final <T> boolean none(@d Iterable<? extends T> none) {
        Intrinsics.checkParameterIsNotNull(none, "$this$none");
        return none instanceof Collection ? ((Collection) none).isEmpty() : !none.iterator().hasNext();
    }

    @d
    @SinceKotlin(version = "1.1")
    public static final <T, C extends Iterable<? extends T>> C onEach(@d C onEach, @d Function1<? super T, Unit> action) {
        Intrinsics.checkParameterIsNotNull(onEach, "$this$onEach");
        Intrinsics.checkParameterIsNotNull(action, "action");
        Iterator<T> it = onEach.iterator();
        while (it.hasNext()) {
            action.invoke(it.next());
        }
        return onEach;
    }

    @d
    public static final <T> Pair<List<T>, List<T>> partition(@d Iterable<? extends T> partition, @d Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(partition, "$this$partition");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        ArrayList arrayList = new ArrayList();
        ArrayList arrayList2 = new ArrayList();
        for (T t : partition) {
            if (predicate.invoke(t).booleanValue()) {
                arrayList.add(t);
            } else {
                arrayList2.add(t);
            }
        }
        return new Pair<>(arrayList, arrayList2);
    }

    @d
    public static final <T> List<T> plus(@d Iterable<? extends T> plus, T t) {
        Intrinsics.checkParameterIsNotNull(plus, "$this$plus");
        if (plus instanceof Collection) {
            return plus((Collection) plus, (Object) t);
        }
        ArrayList arrayList = new ArrayList();
        CollectionsKt__MutableCollectionsKt.addAll(arrayList, plus);
        arrayList.add(t);
        return arrayList;
    }

    @InlineOnly
    private static final <T> List<T> plusElement(@d Iterable<? extends T> iterable, T t) {
        return plus(iterable, t);
    }

    @SinceKotlin(version = "1.3")
    @InlineOnly
    private static final <T> T random(@d Collection<? extends T> collection) {
        return (T) random(collection, Random.INSTANCE);
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final <T> T randomOrNull(@d Collection<? extends T> collection) {
        return (T) randomOrNull(collection, Random.INSTANCE);
    }

    public static final <S, T extends S> S reduce(@d Iterable<? extends T> reduce, @d Function2<? super S, ? super T, ? extends S> operation) {
        Intrinsics.checkParameterIsNotNull(reduce, "$this$reduce");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        Iterator<? extends T> it = reduce.iterator();
        if (!it.hasNext()) {
            throw new UnsupportedOperationException("Empty collection can't be reduced.");
        }
        S next = it.next();
        while (it.hasNext()) {
            next = operation.invoke(next, it.next());
        }
        return next;
    }

    public static final <S, T extends S> S reduceIndexed(@d Iterable<? extends T> reduceIndexed, @d Function3<? super Integer, ? super S, ? super T, ? extends S> operation) {
        Intrinsics.checkParameterIsNotNull(reduceIndexed, "$this$reduceIndexed");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        Iterator<? extends T> it = reduceIndexed.iterator();
        if (!it.hasNext()) {
            throw new UnsupportedOperationException("Empty collection can't be reduced.");
        }
        S next = it.next();
        int i2 = 1;
        while (it.hasNext()) {
            int i3 = i2 + 1;
            if (i2 < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            next = operation.invoke(Integer.valueOf(i2), next, it.next());
            i2 = i3;
        }
        return next;
    }

    @e
    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    public static final <S, T extends S> S reduceOrNull(@d Iterable<? extends T> reduceOrNull, @d Function2<? super S, ? super T, ? extends S> operation) {
        Intrinsics.checkParameterIsNotNull(reduceOrNull, "$this$reduceOrNull");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        Iterator<? extends T> it = reduceOrNull.iterator();
        if (!it.hasNext()) {
            return null;
        }
        S next = it.next();
        while (it.hasNext()) {
            next = operation.invoke(next, it.next());
        }
        return next;
    }

    public static final <S, T extends S> S reduceRight(@d List<? extends T> reduceRight, @d Function2<? super T, ? super S, ? extends S> operation) {
        Intrinsics.checkParameterIsNotNull(reduceRight, "$this$reduceRight");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        ListIterator<? extends T> listIterator = reduceRight.listIterator(reduceRight.size());
        if (!listIterator.hasPrevious()) {
            throw new UnsupportedOperationException("Empty list can't be reduced.");
        }
        S previous = listIterator.previous();
        while (listIterator.hasPrevious()) {
            previous = operation.invoke(listIterator.previous(), previous);
        }
        return previous;
    }

    public static final <S, T extends S> S reduceRightIndexed(@d List<? extends T> reduceRightIndexed, @d Function3<? super Integer, ? super T, ? super S, ? extends S> operation) {
        Intrinsics.checkParameterIsNotNull(reduceRightIndexed, "$this$reduceRightIndexed");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        ListIterator<? extends T> listIterator = reduceRightIndexed.listIterator(reduceRightIndexed.size());
        if (!listIterator.hasPrevious()) {
            throw new UnsupportedOperationException("Empty list can't be reduced.");
        }
        S previous = listIterator.previous();
        while (listIterator.hasPrevious()) {
            previous = operation.invoke(Integer.valueOf(listIterator.previousIndex()), listIterator.previous(), previous);
        }
        return previous;
    }

    @e
    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    public static final <S, T extends S> S reduceRightOrNull(@d List<? extends T> reduceRightOrNull, @d Function2<? super T, ? super S, ? extends S> operation) {
        Intrinsics.checkParameterIsNotNull(reduceRightOrNull, "$this$reduceRightOrNull");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        ListIterator<? extends T> listIterator = reduceRightOrNull.listIterator(reduceRightOrNull.size());
        if (!listIterator.hasPrevious()) {
            return null;
        }
        S previous = listIterator.previous();
        while (listIterator.hasPrevious()) {
            previous = operation.invoke(listIterator.previous(), previous);
        }
        return previous;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @d
    public static final <T> Iterable<T> requireNoNulls(@d Iterable<? extends T> requireNoNulls) {
        Intrinsics.checkParameterIsNotNull(requireNoNulls, "$this$requireNoNulls");
        Iterator it = requireNoNulls.iterator();
        while (it.hasNext()) {
            if (it.next() == null) {
                throw new IllegalArgumentException("null element found in " + requireNoNulls + '.');
            }
        }
        return requireNoNulls;
    }

    @d
    public static final <T> List<T> reversed(@d Iterable<? extends T> reversed) {
        Intrinsics.checkParameterIsNotNull(reversed, "$this$reversed");
        if ((reversed instanceof Collection) && ((Collection) reversed).size() <= 1) {
            return toList(reversed);
        }
        List<T> mutableList = toMutableList(reversed);
        CollectionsKt___CollectionsJvmKt.reverse(mutableList);
        return mutableList;
    }

    @d
    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    public static final <T, R> List<R> scan(@d Iterable<? extends T> scan, R r, @d Function2<? super R, ? super T, ? extends R> operation) {
        Intrinsics.checkParameterIsNotNull(scan, "$this$scan");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        int collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(scan, 9);
        if (collectionSizeOrDefault == 0) {
            return CollectionsKt__CollectionsJVMKt.listOf(r);
        }
        ArrayList arrayList = new ArrayList(collectionSizeOrDefault + 1);
        arrayList.add(r);
        Iterator<? extends T> it = scan.iterator();
        while (it.hasNext()) {
            r = operation.invoke(r, it.next());
            arrayList.add(r);
        }
        return arrayList;
    }

    @d
    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    public static final <T, R> List<R> scanIndexed(@d Iterable<? extends T> scanIndexed, R r, @d Function3<? super Integer, ? super R, ? super T, ? extends R> operation) {
        Intrinsics.checkParameterIsNotNull(scanIndexed, "$this$scanIndexed");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        int collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(scanIndexed, 9);
        if (collectionSizeOrDefault == 0) {
            return CollectionsKt__CollectionsJVMKt.listOf(r);
        }
        ArrayList arrayList = new ArrayList(collectionSizeOrDefault + 1);
        arrayList.add(r);
        int i2 = 0;
        for (T t : scanIndexed) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            r = operation.invoke(valueOf, r, t);
            arrayList.add(r);
        }
        return arrayList;
    }

    @d
    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    public static final <S, T extends S> List<S> scanReduce(@d Iterable<? extends T> scanReduce, @d Function2<? super S, ? super T, ? extends S> operation) {
        Intrinsics.checkParameterIsNotNull(scanReduce, "$this$scanReduce");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        Iterator<? extends T> it = scanReduce.iterator();
        if (!it.hasNext()) {
            return CollectionsKt__CollectionsKt.emptyList();
        }
        S next = it.next();
        ArrayList arrayList = new ArrayList(CollectionsKt__IterablesKt.collectionSizeOrDefault(scanReduce, 10));
        arrayList.add(next);
        while (it.hasNext()) {
            next = operation.invoke(next, it.next());
            arrayList.add(next);
        }
        return arrayList;
    }

    @d
    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    public static final <S, T extends S> List<S> scanReduceIndexed(@d Iterable<? extends T> scanReduceIndexed, @d Function3<? super Integer, ? super S, ? super T, ? extends S> operation) {
        Intrinsics.checkParameterIsNotNull(scanReduceIndexed, "$this$scanReduceIndexed");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        Iterator<? extends T> it = scanReduceIndexed.iterator();
        if (!it.hasNext()) {
            return CollectionsKt__CollectionsKt.emptyList();
        }
        S next = it.next();
        ArrayList arrayList = new ArrayList(CollectionsKt__IterablesKt.collectionSizeOrDefault(scanReduceIndexed, 10));
        arrayList.add(next);
        int i2 = 1;
        while (it.hasNext()) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            next = operation.invoke(valueOf, next, it.next());
            arrayList.add(next);
        }
        return arrayList;
    }

    public static <T> T single(@d Iterable<? extends T> single) {
        Intrinsics.checkParameterIsNotNull(single, "$this$single");
        if (single instanceof List) {
            return (T) single((List) single);
        }
        Iterator<? extends T> it = single.iterator();
        if (!it.hasNext()) {
            throw new NoSuchElementException("Collection is empty.");
        }
        T next = it.next();
        if (it.hasNext()) {
            throw new IllegalArgumentException("Collection has more than one element.");
        }
        return next;
    }

    @e
    public static final <T> T singleOrNull(@d Iterable<? extends T> singleOrNull) {
        Intrinsics.checkParameterIsNotNull(singleOrNull, "$this$singleOrNull");
        if (singleOrNull instanceof List) {
            List list = (List) singleOrNull;
            if (list.size() == 1) {
                return (T) list.get(0);
            }
            return null;
        }
        Iterator<? extends T> it = singleOrNull.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        if (it.hasNext()) {
            return null;
        }
        return next;
    }

    @d
    public static final <T> List<T> slice(@d List<? extends T> slice, @d IntRange indices) {
        Intrinsics.checkParameterIsNotNull(slice, "$this$slice");
        Intrinsics.checkParameterIsNotNull(indices, "indices");
        return indices.isEmpty() ? CollectionsKt__CollectionsKt.emptyList() : toList(slice.subList(indices.getStart().intValue(), indices.getEndInclusive().intValue() + 1));
    }

    public static final <T, R extends Comparable<? super R>> void sortBy(@d List<T> sortBy, @d Function1<? super T, ? extends R> selector) {
        Intrinsics.checkParameterIsNotNull(sortBy, "$this$sortBy");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        if (sortBy.size() > 1) {
            CollectionsKt__MutableCollectionsJVMKt.sortWith(sortBy, new ComparisonsKt__ComparisonsKt$compareBy$2(selector));
        }
    }

    public static final <T, R extends Comparable<? super R>> void sortByDescending(@d List<T> sortByDescending, @d Function1<? super T, ? extends R> selector) {
        Intrinsics.checkParameterIsNotNull(sortByDescending, "$this$sortByDescending");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        if (sortByDescending.size() > 1) {
            CollectionsKt__MutableCollectionsJVMKt.sortWith(sortByDescending, new ComparisonsKt__ComparisonsKt$compareByDescending$1(selector));
        }
    }

    public static final <T extends Comparable<? super T>> void sortDescending(@d List<T> sortDescending) {
        Comparator reverseOrder;
        Intrinsics.checkParameterIsNotNull(sortDescending, "$this$sortDescending");
        reverseOrder = ComparisonsKt__ComparisonsKt.reverseOrder();
        CollectionsKt__MutableCollectionsJVMKt.sortWith(sortDescending, reverseOrder);
    }

    @d
    public static final <T extends Comparable<? super T>> List<T> sorted(@d Iterable<? extends T> sorted) {
        List<T> asList;
        Intrinsics.checkParameterIsNotNull(sorted, "$this$sorted");
        if (!(sorted instanceof Collection)) {
            List<T> mutableList = toMutableList(sorted);
            CollectionsKt__MutableCollectionsJVMKt.sort(mutableList);
            return mutableList;
        }
        Collection collection = (Collection) sorted;
        if (collection.size() <= 1) {
            return toList(sorted);
        }
        Object[] array = collection.toArray(new Comparable[0]);
        if (array == null) {
            throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
        }
        Comparable[] comparableArr = (Comparable[]) array;
        ArraysKt___ArraysJvmKt.sort((Object[]) comparableArr);
        asList = ArraysKt___ArraysJvmKt.asList(comparableArr);
        return asList;
    }

    @d
    public static final <T, R extends Comparable<? super R>> List<T> sortedBy(@d Iterable<? extends T> sortedBy, @d Function1<? super T, ? extends R> selector) {
        Intrinsics.checkParameterIsNotNull(sortedBy, "$this$sortedBy");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        return sortedWith(sortedBy, new ComparisonsKt__ComparisonsKt$compareBy$2(selector));
    }

    @d
    public static final <T, R extends Comparable<? super R>> List<T> sortedByDescending(@d Iterable<? extends T> sortedByDescending, @d Function1<? super T, ? extends R> selector) {
        Intrinsics.checkParameterIsNotNull(sortedByDescending, "$this$sortedByDescending");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        return sortedWith(sortedByDescending, new ComparisonsKt__ComparisonsKt$compareByDescending$1(selector));
    }

    @d
    public static final <T extends Comparable<? super T>> List<T> sortedDescending(@d Iterable<? extends T> sortedDescending) {
        Comparator reverseOrder;
        Intrinsics.checkParameterIsNotNull(sortedDescending, "$this$sortedDescending");
        reverseOrder = ComparisonsKt__ComparisonsKt.reverseOrder();
        return sortedWith(sortedDescending, reverseOrder);
    }

    /* JADX WARN: Multi-variable type inference failed */
    @d
    public static final <T> List<T> sortedWith(@d Iterable<? extends T> sortedWith, @d Comparator<? super T> comparator) {
        List<T> asList;
        Intrinsics.checkParameterIsNotNull(sortedWith, "$this$sortedWith");
        Intrinsics.checkParameterIsNotNull(comparator, "comparator");
        if (!(sortedWith instanceof Collection)) {
            List<T> mutableList = toMutableList(sortedWith);
            CollectionsKt__MutableCollectionsJVMKt.sortWith(mutableList, comparator);
            return mutableList;
        }
        Collection collection = (Collection) sortedWith;
        if (collection.size() <= 1) {
            return toList(sortedWith);
        }
        Object[] array = collection.toArray(new Object[0]);
        if (array == null) {
            throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
        }
        ArraysKt___ArraysJvmKt.sortWith(array, comparator);
        asList = ArraysKt___ArraysJvmKt.asList(array);
        return asList;
    }

    @d
    public static final <T> Set<T> subtract(@d Iterable<? extends T> subtract, @d Iterable<? extends T> other) {
        Intrinsics.checkParameterIsNotNull(subtract, "$this$subtract");
        Intrinsics.checkParameterIsNotNull(other, "other");
        Set<T> mutableSet = toMutableSet(subtract);
        CollectionsKt__MutableCollectionsKt.removeAll(mutableSet, other);
        return mutableSet;
    }

    public static final <T> int sumBy(@d Iterable<? extends T> sumBy, @d Function1<? super T, Integer> selector) {
        Intrinsics.checkParameterIsNotNull(sumBy, "$this$sumBy");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        Iterator<? extends T> it = sumBy.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            i2 += selector.invoke(it.next()).intValue();
        }
        return i2;
    }

    public static final <T> double sumByDouble(@d Iterable<? extends T> sumByDouble, @d Function1<? super T, Double> selector) {
        Intrinsics.checkParameterIsNotNull(sumByDouble, "$this$sumByDouble");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        Iterator<? extends T> it = sumByDouble.iterator();
        double d2 = 0.0d;
        while (it.hasNext()) {
            d2 += selector.invoke(it.next()).doubleValue();
        }
        return d2;
    }

    @JvmName(name = "sumOfByte")
    public static final int sumOfByte(@d Iterable<Byte> sum) {
        Intrinsics.checkParameterIsNotNull(sum, "$this$sum");
        Iterator<Byte> it = sum.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            i2 += it.next().byteValue();
        }
        return i2;
    }

    @JvmName(name = "sumOfDouble")
    public static final double sumOfDouble(@d Iterable<Double> sum) {
        Intrinsics.checkParameterIsNotNull(sum, "$this$sum");
        Iterator<Double> it = sum.iterator();
        double d2 = 0.0d;
        while (it.hasNext()) {
            d2 += it.next().doubleValue();
        }
        return d2;
    }

    @JvmName(name = "sumOfFloat")
    public static final float sumOfFloat(@d Iterable<Float> sum) {
        Intrinsics.checkParameterIsNotNull(sum, "$this$sum");
        Iterator<Float> it = sum.iterator();
        float f2 = 0.0f;
        while (it.hasNext()) {
            f2 += it.next().floatValue();
        }
        return f2;
    }

    @JvmName(name = "sumOfInt")
    public static final int sumOfInt(@d Iterable<Integer> sum) {
        Intrinsics.checkParameterIsNotNull(sum, "$this$sum");
        Iterator<Integer> it = sum.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            i2 += it.next().intValue();
        }
        return i2;
    }

    @JvmName(name = "sumOfLong")
    public static final long sumOfLong(@d Iterable<Long> sum) {
        Intrinsics.checkParameterIsNotNull(sum, "$this$sum");
        Iterator<Long> it = sum.iterator();
        long j2 = 0;
        while (it.hasNext()) {
            j2 += it.next().longValue();
        }
        return j2;
    }

    @JvmName(name = "sumOfShort")
    public static final int sumOfShort(@d Iterable<Short> sum) {
        Intrinsics.checkParameterIsNotNull(sum, "$this$sum");
        Iterator<Short> it = sum.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            i2 += it.next().shortValue();
        }
        return i2;
    }

    @d
    public static final <T> List<T> take(@d Iterable<? extends T> take, int i2) {
        Intrinsics.checkParameterIsNotNull(take, "$this$take");
        int i3 = 0;
        if (!(i2 >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
        }
        if (i2 == 0) {
            return CollectionsKt__CollectionsKt.emptyList();
        }
        if (take instanceof Collection) {
            if (i2 >= ((Collection) take).size()) {
                return toList(take);
            }
            if (i2 == 1) {
                return CollectionsKt__CollectionsJVMKt.listOf(first(take));
            }
        }
        ArrayList arrayList = new ArrayList(i2);
        Iterator<? extends T> it = take.iterator();
        while (it.hasNext()) {
            arrayList.add(it.next());
            i3++;
            if (i3 == i2) {
                break;
            }
        }
        return CollectionsKt__CollectionsKt.optimizeReadOnlyList(arrayList);
    }

    @d
    public static final <T> List<T> takeLast(@d List<? extends T> takeLast, int i2) {
        Intrinsics.checkParameterIsNotNull(takeLast, "$this$takeLast");
        if (!(i2 >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
        }
        if (i2 == 0) {
            return CollectionsKt__CollectionsKt.emptyList();
        }
        int size = takeLast.size();
        if (i2 >= size) {
            return toList(takeLast);
        }
        if (i2 == 1) {
            return CollectionsKt__CollectionsJVMKt.listOf(CollectionsKt.last((List) takeLast));
        }
        ArrayList arrayList = new ArrayList(i2);
        if (takeLast instanceof RandomAccess) {
            for (int i3 = size - i2; i3 < size; i3++) {
                arrayList.add(takeLast.get(i3));
            }
        } else {
            ListIterator<? extends T> listIterator = takeLast.listIterator(size - i2);
            while (listIterator.hasNext()) {
                arrayList.add(listIterator.next());
            }
        }
        return arrayList;
    }

    @d
    public static final <T> List<T> takeLastWhile(@d List<? extends T> takeLastWhile, @d Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(takeLastWhile, "$this$takeLastWhile");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        if (takeLastWhile.isEmpty()) {
            return CollectionsKt__CollectionsKt.emptyList();
        }
        ListIterator<? extends T> listIterator = takeLastWhile.listIterator(takeLastWhile.size());
        while (listIterator.hasPrevious()) {
            if (!predicate.invoke(listIterator.previous()).booleanValue()) {
                listIterator.next();
                int size = takeLastWhile.size() - listIterator.nextIndex();
                if (size == 0) {
                    return CollectionsKt__CollectionsKt.emptyList();
                }
                ArrayList arrayList = new ArrayList(size);
                while (listIterator.hasNext()) {
                    arrayList.add(listIterator.next());
                }
                return arrayList;
            }
        }
        return toList(takeLastWhile);
    }

    @d
    public static final <T> List<T> takeWhile(@d Iterable<? extends T> takeWhile, @d Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(takeWhile, "$this$takeWhile");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        ArrayList arrayList = new ArrayList();
        for (T t : takeWhile) {
            if (!predicate.invoke(t).booleanValue()) {
                break;
            }
            arrayList.add(t);
        }
        return arrayList;
    }

    @d
    public static final boolean[] toBooleanArray(@d Collection<Boolean> toBooleanArray) {
        Intrinsics.checkParameterIsNotNull(toBooleanArray, "$this$toBooleanArray");
        boolean[] zArr = new boolean[toBooleanArray.size()];
        Iterator<Boolean> it = toBooleanArray.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            zArr[i2] = it.next().booleanValue();
            i2++;
        }
        return zArr;
    }

    @d
    public static final byte[] toByteArray(@d Collection<Byte> toByteArray) {
        Intrinsics.checkParameterIsNotNull(toByteArray, "$this$toByteArray");
        byte[] bArr = new byte[toByteArray.size()];
        Iterator<Byte> it = toByteArray.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            bArr[i2] = it.next().byteValue();
            i2++;
        }
        return bArr;
    }

    @d
    public static final char[] toCharArray(@d Collection<Character> toCharArray) {
        Intrinsics.checkParameterIsNotNull(toCharArray, "$this$toCharArray");
        char[] cArr = new char[toCharArray.size()];
        Iterator<Character> it = toCharArray.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            cArr[i2] = it.next().charValue();
            i2++;
        }
        return cArr;
    }

    @d
    public static final <T, C extends Collection<? super T>> C toCollection(@d Iterable<? extends T> toCollection, @d C destination) {
        Intrinsics.checkParameterIsNotNull(toCollection, "$this$toCollection");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Iterator<? extends T> it = toCollection.iterator();
        while (it.hasNext()) {
            destination.add(it.next());
        }
        return destination;
    }

    @d
    public static final double[] toDoubleArray(@d Collection<Double> toDoubleArray) {
        Intrinsics.checkParameterIsNotNull(toDoubleArray, "$this$toDoubleArray");
        double[] dArr = new double[toDoubleArray.size()];
        Iterator<Double> it = toDoubleArray.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            dArr[i2] = it.next().doubleValue();
            i2++;
        }
        return dArr;
    }

    @d
    public static final float[] toFloatArray(@d Collection<Float> toFloatArray) {
        Intrinsics.checkParameterIsNotNull(toFloatArray, "$this$toFloatArray");
        float[] fArr = new float[toFloatArray.size()];
        Iterator<Float> it = toFloatArray.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            fArr[i2] = it.next().floatValue();
            i2++;
        }
        return fArr;
    }

    @d
    public static final <T> HashSet<T> toHashSet(@d Iterable<? extends T> toHashSet) {
        int mapCapacity;
        Intrinsics.checkParameterIsNotNull(toHashSet, "$this$toHashSet");
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(CollectionsKt__IterablesKt.collectionSizeOrDefault(toHashSet, 12));
        return (HashSet) toCollection(toHashSet, new HashSet(mapCapacity));
    }

    @d
    public static final int[] toIntArray(@d Collection<Integer> toIntArray) {
        Intrinsics.checkParameterIsNotNull(toIntArray, "$this$toIntArray");
        int[] iArr = new int[toIntArray.size()];
        Iterator<Integer> it = toIntArray.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            iArr[i2] = it.next().intValue();
            i2++;
        }
        return iArr;
    }

    @d
    public static <T> List<T> toList(@d Iterable<? extends T> toList) {
        Intrinsics.checkParameterIsNotNull(toList, "$this$toList");
        if (!(toList instanceof Collection)) {
            return CollectionsKt__CollectionsKt.optimizeReadOnlyList(toMutableList(toList));
        }
        Collection collection = (Collection) toList;
        int size = collection.size();
        if (size == 0) {
            return CollectionsKt__CollectionsKt.emptyList();
        }
        if (size != 1) {
            return toMutableList(collection);
        }
        return CollectionsKt__CollectionsJVMKt.listOf(toList instanceof List ? ((List) toList).get(0) : toList.iterator().next());
    }

    @d
    public static final long[] toLongArray(@d Collection<Long> toLongArray) {
        Intrinsics.checkParameterIsNotNull(toLongArray, "$this$toLongArray");
        long[] jArr = new long[toLongArray.size()];
        Iterator<Long> it = toLongArray.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            jArr[i2] = it.next().longValue();
            i2++;
        }
        return jArr;
    }

    @d
    public static final <T> List<T> toMutableList(@d Iterable<? extends T> toMutableList) {
        Intrinsics.checkParameterIsNotNull(toMutableList, "$this$toMutableList");
        return toMutableList instanceof Collection ? toMutableList((Collection) toMutableList) : (List) toCollection(toMutableList, new ArrayList());
    }

    @d
    public static final <T> Set<T> toMutableSet(@d Iterable<? extends T> toMutableSet) {
        Intrinsics.checkParameterIsNotNull(toMutableSet, "$this$toMutableSet");
        return toMutableSet instanceof Collection ? new LinkedHashSet((Collection) toMutableSet) : (Set) toCollection(toMutableSet, new LinkedHashSet());
    }

    @d
    public static final <T> Set<T> toSet(@d Iterable<? extends T> toSet) {
        Set<T> optimizeReadOnlySet;
        Set<T> emptySet;
        Set<T> of;
        int mapCapacity;
        Intrinsics.checkParameterIsNotNull(toSet, "$this$toSet");
        if (!(toSet instanceof Collection)) {
            optimizeReadOnlySet = SetsKt__SetsKt.optimizeReadOnlySet((Set) toCollection(toSet, new LinkedHashSet()));
            return optimizeReadOnlySet;
        }
        Collection collection = (Collection) toSet;
        int size = collection.size();
        if (size == 0) {
            emptySet = SetsKt__SetsKt.emptySet();
            return emptySet;
        }
        if (size != 1) {
            mapCapacity = MapsKt__MapsJVMKt.mapCapacity(collection.size());
            return (Set) toCollection(toSet, new LinkedHashSet(mapCapacity));
        }
        of = SetsKt__SetsJVMKt.setOf(toSet instanceof List ? ((List) toSet).get(0) : toSet.iterator().next());
        return of;
    }

    @d
    public static final short[] toShortArray(@d Collection<Short> toShortArray) {
        Intrinsics.checkParameterIsNotNull(toShortArray, "$this$toShortArray");
        short[] sArr = new short[toShortArray.size()];
        Iterator<Short> it = toShortArray.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            sArr[i2] = it.next().shortValue();
            i2++;
        }
        return sArr;
    }

    @d
    public static final <T> Set<T> union(@d Iterable<? extends T> union, @d Iterable<? extends T> other) {
        Intrinsics.checkParameterIsNotNull(union, "$this$union");
        Intrinsics.checkParameterIsNotNull(other, "other");
        Set<T> mutableSet = toMutableSet(union);
        CollectionsKt__MutableCollectionsKt.addAll(mutableSet, other);
        return mutableSet;
    }

    @d
    @SinceKotlin(version = "1.2")
    public static final <T> List<List<T>> windowed(@d Iterable<? extends T> windowed, int i2, int i3, boolean z) {
        int coerceAtMost;
        Intrinsics.checkParameterIsNotNull(windowed, "$this$windowed");
        SlidingWindowKt.checkWindowSizeStep(i2, i3);
        if (!(windowed instanceof RandomAccess) || !(windowed instanceof List)) {
            ArrayList arrayList = new ArrayList();
            Iterator windowedIterator = SlidingWindowKt.windowedIterator(windowed.iterator(), i2, i3, z, false);
            while (windowedIterator.hasNext()) {
                arrayList.add((List) windowedIterator.next());
            }
            return arrayList;
        }
        List list = (List) windowed;
        int size = list.size();
        ArrayList arrayList2 = new ArrayList((size / i3) + (size % i3 == 0 ? 0 : 1));
        int i4 = 0;
        while (i4 >= 0 && size > i4) {
            coerceAtMost = RangesKt___RangesKt.coerceAtMost(i2, size - i4);
            if (coerceAtMost < i2 && !z) {
                break;
            }
            ArrayList arrayList3 = new ArrayList(coerceAtMost);
            for (int i5 = 0; i5 < coerceAtMost; i5++) {
                arrayList3.add(list.get(i5 + i4));
            }
            arrayList2.add(arrayList3);
            i4 += i3;
        }
        return arrayList2;
    }

    public static /* synthetic */ List windowed$default(Iterable iterable, int i2, int i3, boolean z, int i4, Object obj) {
        if ((i4 & 2) != 0) {
            i3 = 1;
        }
        if ((i4 & 4) != 0) {
            z = false;
        }
        return windowed(iterable, i2, i3, z);
    }

    @d
    public static final <T> Iterable<IndexedValue<T>> withIndex(@d final Iterable<? extends T> withIndex) {
        Intrinsics.checkParameterIsNotNull(withIndex, "$this$withIndex");
        return new IndexingIterable(new Function0<Iterator<? extends T>>() { // from class: kotlin.collections.CollectionsKt___CollectionsKt$withIndex$1
            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            {
                super(0);
            }

            @Override // kotlin.jvm.functions.Function0
            @d
            public final Iterator<T> invoke() {
                return withIndex.iterator();
            }
        });
    }

    /* JADX WARN: Multi-variable type inference failed */
    @d
    public static final <T, R, V> List<V> zip(@d Iterable<? extends T> zip, @d R[] other, @d Function2<? super T, ? super R, ? extends V> transform) {
        Intrinsics.checkParameterIsNotNull(zip, "$this$zip");
        Intrinsics.checkParameterIsNotNull(other, "other");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        int length = other.length;
        ArrayList arrayList = new ArrayList(Math.min(CollectionsKt__IterablesKt.collectionSizeOrDefault(zip, 10), length));
        int i2 = 0;
        for (T t : zip) {
            if (i2 >= length) {
                break;
            }
            arrayList.add(transform.invoke(t, other[i2]));
            i2++;
        }
        return arrayList;
    }

    @d
    @SinceKotlin(version = "1.2")
    public static final <T, R> List<R> zipWithNext(@d Iterable<? extends T> zipWithNext, @d Function2<? super T, ? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull(zipWithNext, "$this$zipWithNext");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        Iterator<? extends T> it = zipWithNext.iterator();
        if (!it.hasNext()) {
            return CollectionsKt__CollectionsKt.emptyList();
        }
        ArrayList arrayList = new ArrayList();
        a.a next = it.next();
        while (it.hasNext()) {
            T next2 = it.next();
            arrayList.add(transform.invoke(next, next2));
            next = next2;
        }
        return arrayList;
    }

    @d
    @SinceKotlin(version = "1.2")
    public static final <T, R> List<R> chunked(@d Iterable<? extends T> chunked, int i2, @d Function1<? super List<? extends T>, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull(chunked, "$this$chunked");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        return windowed(chunked, i2, i2, true, transform);
    }

    @InlineOnly
    private static final <T> List<T> plusElement(@d Collection<? extends T> collection, T t) {
        return plus((Collection) collection, (Object) t);
    }

    @SinceKotlin(version = "1.3")
    public static final <T> T random(@d Collection<? extends T> random, @d Random random2) {
        Intrinsics.checkParameterIsNotNull(random, "$this$random");
        Intrinsics.checkParameterIsNotNull(random2, "random");
        if (random.isEmpty()) {
            throw new NoSuchElementException("Collection is empty.");
        }
        return (T) elementAt(random, random2.nextInt(random.size()));
    }

    @e
    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    public static final <T> T randomOrNull(@d Collection<? extends T> randomOrNull, @d Random random) {
        Intrinsics.checkParameterIsNotNull(randomOrNull, "$this$randomOrNull");
        Intrinsics.checkParameterIsNotNull(random, "random");
        if (randomOrNull.isEmpty()) {
            return null;
        }
        return (T) elementAt(randomOrNull, random.nextInt(randomOrNull.size()));
    }

    public static /* synthetic */ List windowed$default(Iterable iterable, int i2, int i3, boolean z, Function1 function1, int i4, Object obj) {
        if ((i4 & 2) != 0) {
            i3 = 1;
        }
        if ((i4 & 4) != 0) {
            z = false;
        }
        return windowed(iterable, i2, i3, z, function1);
    }

    public static final <T> boolean any(@d Iterable<? extends T> any, @d Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(any, "$this$any");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        if ((any instanceof Collection) && ((Collection) any).isEmpty()) {
            return false;
        }
        Iterator<? extends T> it = any.iterator();
        while (it.hasNext()) {
            if (predicate.invoke(it.next()).booleanValue()) {
                return true;
            }
        }
        return false;
    }

    @d
    public static final <T, K, V, M extends Map<? super K, ? super V>> M associateByTo(@d Iterable<? extends T> associateByTo, @d M destination, @d Function1<? super T, ? extends K> keySelector, @d Function1<? super T, ? extends V> valueTransform) {
        Intrinsics.checkParameterIsNotNull(associateByTo, "$this$associateByTo");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        Intrinsics.checkParameterIsNotNull(valueTransform, "valueTransform");
        for (T t : associateByTo) {
            destination.put(keySelector.invoke(t), valueTransform.invoke(t));
        }
        return destination;
    }

    @InlineOnly
    private static final <T> int count(@d Collection<? extends T> collection) {
        return collection.size();
    }

    /* JADX WARN: Type inference failed for: r0v3, types: [T, java.lang.Object] */
    @InlineOnly
    private static final <T> T findLast(@d List<? extends T> list, Function1<? super T, Boolean> function1) {
        ListIterator<? extends T> listIterator = list.listIterator(list.size());
        while (listIterator.hasPrevious()) {
            T previous = listIterator.previous();
            if (function1.invoke(previous).booleanValue()) {
                return previous;
            }
        }
        return null;
    }

    public static final <T> boolean none(@d Iterable<? extends T> none, @d Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(none, "$this$none");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        if ((none instanceof Collection) && ((Collection) none).isEmpty()) {
            return true;
        }
        Iterator<? extends T> it = none.iterator();
        while (it.hasNext()) {
            if (predicate.invoke(it.next()).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @d
    public static final <T> List<T> requireNoNulls(@d List<? extends T> requireNoNulls) {
        Intrinsics.checkParameterIsNotNull(requireNoNulls, "$this$requireNoNulls");
        Iterator it = requireNoNulls.iterator();
        while (it.hasNext()) {
            if (it.next() == null) {
                throw new IllegalArgumentException("null element found in " + requireNoNulls + '.');
            }
        }
        return requireNoNulls;
    }

    @d
    public static final <T> List<T> slice(@d List<? extends T> slice, @d Iterable<Integer> indices) {
        Intrinsics.checkParameterIsNotNull(slice, "$this$slice");
        Intrinsics.checkParameterIsNotNull(indices, "indices");
        int collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(indices, 10);
        if (collectionSizeOrDefault == 0) {
            return CollectionsKt__CollectionsKt.emptyList();
        }
        ArrayList arrayList = new ArrayList(collectionSizeOrDefault);
        Iterator<Integer> it = indices.iterator();
        while (it.hasNext()) {
            arrayList.add(slice.get(it.next().intValue()));
        }
        return arrayList;
    }

    public static final <T> int count(@d Iterable<? extends T> count, @d Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(count, "$this$count");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        if ((count instanceof Collection) && ((Collection) count).isEmpty()) {
            return 0;
        }
        Iterator<? extends T> it = count.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            if (predicate.invoke(it.next()).booleanValue() && (i2 = i2 + 1) < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Count overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        return i2;
    }

    @InlineOnly
    private static final <T> T elementAt(@d List<? extends T> list, int i2) {
        return list.get(i2);
    }

    public static final <T> int indexOfFirst(@d List<? extends T> indexOfFirst, @d Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(indexOfFirst, "$this$indexOfFirst");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        Iterator<? extends T> it = indexOfFirst.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            if (predicate.invoke(it.next()).booleanValue()) {
                return i2;
            }
            i2++;
        }
        return -1;
    }

    public static final <T> int indexOfLast(@d List<? extends T> indexOfLast, @d Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(indexOfLast, "$this$indexOfLast");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        ListIterator<? extends T> listIterator = indexOfLast.listIterator(indexOfLast.size());
        while (listIterator.hasPrevious()) {
            if (predicate.invoke(listIterator.previous()).booleanValue()) {
                return listIterator.nextIndex();
            }
        }
        return -1;
    }

    @d
    public static final <T> List<T> minus(@d Iterable<? extends T> minus, @d T[] elements) {
        HashSet hashSet;
        Intrinsics.checkParameterIsNotNull(minus, "$this$minus");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        if (elements.length == 0) {
            return toList(minus);
        }
        hashSet = ArraysKt___ArraysKt.toHashSet(elements);
        ArrayList arrayList = new ArrayList();
        for (T t : minus) {
            if (!hashSet.contains(t)) {
                arrayList.add(t);
            }
        }
        return arrayList;
    }

    @d
    public static <T> List<T> toMutableList(@d Collection<? extends T> toMutableList) {
        Intrinsics.checkParameterIsNotNull(toMutableList, "$this$toMutableList");
        return new ArrayList(toMutableList);
    }

    @d
    public static final <T, K, V> Map<K, V> associateBy(@d Iterable<? extends T> associateBy, @d Function1<? super T, ? extends K> keySelector, @d Function1<? super T, ? extends V> valueTransform) {
        int mapCapacity;
        int coerceAtLeast;
        Intrinsics.checkParameterIsNotNull(associateBy, "$this$associateBy");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        Intrinsics.checkParameterIsNotNull(valueTransform, "valueTransform");
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(CollectionsKt__IterablesKt.collectionSizeOrDefault(associateBy, 10));
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        for (T t : associateBy) {
            linkedHashMap.put(keySelector.invoke(t), valueTransform.invoke(t));
        }
        return linkedHashMap;
    }

    public static final <T> int indexOf(@d List<? extends T> indexOf, T t) {
        Intrinsics.checkParameterIsNotNull(indexOf, "$this$indexOf");
        return indexOf.indexOf(t);
    }

    public static final <T> int lastIndexOf(@d List<? extends T> lastIndexOf, T t) {
        Intrinsics.checkParameterIsNotNull(lastIndexOf, "$this$lastIndexOf");
        return lastIndexOf.lastIndexOf(t);
    }

    @d
    public static final <T> List<T> plus(@d Collection<? extends T> plus, T t) {
        Intrinsics.checkParameterIsNotNull(plus, "$this$plus");
        ArrayList arrayList = new ArrayList(plus.size() + 1);
        arrayList.addAll(plus);
        arrayList.add(t);
        return arrayList;
    }

    @d
    public static final <T, R, V> List<V> zip(@d Iterable<? extends T> zip, @d Iterable<? extends R> other, @d Function2<? super T, ? super R, ? extends V> transform) {
        Intrinsics.checkParameterIsNotNull(zip, "$this$zip");
        Intrinsics.checkParameterIsNotNull(other, "other");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        Iterator<? extends T> it = zip.iterator();
        Iterator<? extends R> it2 = other.iterator();
        ArrayList arrayList = new ArrayList(Math.min(CollectionsKt__IterablesKt.collectionSizeOrDefault(zip, 10), CollectionsKt__IterablesKt.collectionSizeOrDefault(other, 10)));
        while (it.hasNext() && it2.hasNext()) {
            arrayList.add(transform.invoke(it.next(), it2.next()));
        }
        return arrayList;
    }

    @InlineOnly
    private static final <T> T elementAtOrNull(@d List<? extends T> list, int i2) {
        return (T) getOrNull(list, i2);
    }

    public static final <T> T first(@d List<? extends T> first) {
        Intrinsics.checkParameterIsNotNull(first, "$this$first");
        if (!first.isEmpty()) {
            return first.get(0);
        }
        throw new NoSuchElementException("List is empty.");
    }

    @e
    public static final <T> T singleOrNull(@d List<? extends T> singleOrNull) {
        Intrinsics.checkParameterIsNotNull(singleOrNull, "$this$singleOrNull");
        if (singleOrNull.size() == 1) {
            return singleOrNull.get(0);
        }
        return null;
    }

    @e
    public static final <T> T firstOrNull(@d List<? extends T> firstOrNull) {
        Intrinsics.checkParameterIsNotNull(firstOrNull, "$this$firstOrNull");
        if (firstOrNull.isEmpty()) {
            return null;
        }
        return firstOrNull.get(0);
    }

    @e
    public static final <T> T lastOrNull(@d List<? extends T> lastOrNull) {
        Intrinsics.checkParameterIsNotNull(lastOrNull, "$this$lastOrNull");
        if (lastOrNull.isEmpty()) {
            return null;
        }
        return lastOrNull.get(lastOrNull.size() - 1);
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r3v1, types: [java.lang.Object] */
    @e
    public static final <T> T singleOrNull(@d Iterable<? extends T> singleOrNull, @d Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(singleOrNull, "$this$singleOrNull");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        boolean z = false;
        T t = null;
        for (T t2 : singleOrNull) {
            if (predicate.invoke(t2).booleanValue()) {
                if (z) {
                    return null;
                }
                z = true;
                t = t2;
            }
        }
        if (z) {
            return t;
        }
        return null;
    }

    @InlineOnly
    private static final <T> T elementAtOrElse(@d List<? extends T> list, int i2, Function1<? super Integer, ? extends T> function1) {
        return (i2 < 0 || i2 > CollectionsKt__CollectionsKt.getLastIndex(list)) ? function1.invoke(Integer.valueOf(i2)) : list.get(i2);
    }

    /* JADX WARN: Type inference failed for: r0v3, types: [T, java.lang.Object] */
    @e
    public static final <T> T firstOrNull(@d Iterable<? extends T> firstOrNull, @d Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(firstOrNull, "$this$firstOrNull");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        for (T t : firstOrNull) {
            if (predicate.invoke(t).booleanValue()) {
                return t;
            }
        }
        return null;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @d
    public static final <T, K, V, M extends Map<? super K, List<V>>> M groupByTo(@d Iterable<? extends T> groupByTo, @d M destination, @d Function1<? super T, ? extends K> keySelector, @d Function1<? super T, ? extends V> valueTransform) {
        Intrinsics.checkParameterIsNotNull(groupByTo, "$this$groupByTo");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        Intrinsics.checkParameterIsNotNull(valueTransform, "valueTransform");
        for (T t : groupByTo) {
            K invoke = keySelector.invoke(t);
            Object obj = destination.get(invoke);
            if (obj == null) {
                obj = new ArrayList();
                destination.put(invoke, obj);
            }
            ((List) obj).add(valueTransform.invoke(t));
        }
        return destination;
    }

    public static <T> T last(@d List<? extends T> last) {
        Intrinsics.checkParameterIsNotNull(last, "$this$last");
        if (!last.isEmpty()) {
            return last.get(CollectionsKt__CollectionsKt.getLastIndex(last));
        }
        throw new NoSuchElementException("List is empty.");
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r1v1, types: [java.lang.Object] */
    @e
    public static final <T> T lastOrNull(@d Iterable<? extends T> lastOrNull, @d Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(lastOrNull, "$this$lastOrNull");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        T t = null;
        for (T t2 : lastOrNull) {
            if (predicate.invoke(t2).booleanValue()) {
                t = t2;
            }
        }
        return t;
    }

    @d
    public static final <T> List<T> plus(@d Iterable<? extends T> plus, @d T[] elements) {
        Intrinsics.checkParameterIsNotNull(plus, "$this$plus");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        if (plus instanceof Collection) {
            return plus((Collection) plus, (Object[]) elements);
        }
        ArrayList arrayList = new ArrayList();
        CollectionsKt__MutableCollectionsKt.addAll(arrayList, plus);
        CollectionsKt__MutableCollectionsKt.addAll(arrayList, elements);
        return arrayList;
    }

    public static final <T> T single(@d List<? extends T> single) {
        Intrinsics.checkParameterIsNotNull(single, "$this$single");
        int size = single.size();
        if (size == 0) {
            throw new NoSuchElementException("List is empty.");
        }
        if (size == 1) {
            return single.get(0);
        }
        throw new IllegalArgumentException("List has more than one element.");
    }

    @d
    @SinceKotlin(version = "1.2")
    public static final <T> List<Pair<T, T>> zipWithNext(@d Iterable<? extends T> zipWithNext) {
        Intrinsics.checkParameterIsNotNull(zipWithNext, "$this$zipWithNext");
        Iterator<? extends T> it = zipWithNext.iterator();
        if (!it.hasNext()) {
            return CollectionsKt__CollectionsKt.emptyList();
        }
        ArrayList arrayList = new ArrayList();
        T next = it.next();
        while (it.hasNext()) {
            T next2 = it.next();
            arrayList.add(TuplesKt.to(next, next2));
            next = next2;
        }
        return arrayList;
    }

    /* JADX WARN: Type inference failed for: r0v3, types: [T, java.lang.Object] */
    public static final <T> T first(@d Iterable<? extends T> first, @d Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(first, "$this$first");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        for (T t : first) {
            if (predicate.invoke(t).booleanValue()) {
                return t;
            }
        }
        throw new NoSuchElementException("Collection contains no element matching the predicate.");
    }

    @d
    public static final <T, K, V> Map<K, List<V>> groupBy(@d Iterable<? extends T> groupBy, @d Function1<? super T, ? extends K> keySelector, @d Function1<? super T, ? extends V> valueTransform) {
        Intrinsics.checkParameterIsNotNull(groupBy, "$this$groupBy");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        Intrinsics.checkParameterIsNotNull(valueTransform, "valueTransform");
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        for (T t : groupBy) {
            K invoke = keySelector.invoke(t);
            List<V> list = linkedHashMap.get(invoke);
            if (list == null) {
                list = new ArrayList<>();
                linkedHashMap.put(invoke, list);
            }
            list.add(valueTransform.invoke(t));
        }
        return linkedHashMap;
    }

    @e
    @SinceKotlin(version = "1.1")
    /* renamed from: max */
    public static final Float m399max(@d Iterable<Float> max) {
        Intrinsics.checkParameterIsNotNull(max, "$this$max");
        Iterator<Float> it = max.iterator();
        if (!it.hasNext()) {
            return null;
        }
        float floatValue = it.next().floatValue();
        if (Float.isNaN(floatValue)) {
            return Float.valueOf(floatValue);
        }
        while (it.hasNext()) {
            float floatValue2 = it.next().floatValue();
            if (Float.isNaN(floatValue2)) {
                return Float.valueOf(floatValue2);
            }
            if (floatValue < floatValue2) {
                floatValue = floatValue2;
            }
        }
        return Float.valueOf(floatValue);
    }

    @e
    @SinceKotlin(version = "1.1")
    /* renamed from: min */
    public static final Float m401min(@d Iterable<Float> min) {
        Intrinsics.checkParameterIsNotNull(min, "$this$min");
        Iterator<Float> it = min.iterator();
        if (!it.hasNext()) {
            return null;
        }
        float floatValue = it.next().floatValue();
        if (Float.isNaN(floatValue)) {
            return Float.valueOf(floatValue);
        }
        while (it.hasNext()) {
            float floatValue2 = it.next().floatValue();
            if (Float.isNaN(floatValue2)) {
                return Float.valueOf(floatValue2);
            }
            if (floatValue > floatValue2) {
                floatValue = floatValue2;
            }
        }
        return Float.valueOf(floatValue);
    }

    @d
    public static final <T> List<T> minus(@d Iterable<? extends T> minus, @d Iterable<? extends T> elements) {
        Intrinsics.checkParameterIsNotNull(minus, "$this$minus");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        Collection convertToSetForSetOperationWith = CollectionsKt__IterablesKt.convertToSetForSetOperationWith(elements, minus);
        if (convertToSetForSetOperationWith.isEmpty()) {
            return toList(minus);
        }
        ArrayList arrayList = new ArrayList();
        for (T t : minus) {
            if (!convertToSetForSetOperationWith.contains(t)) {
                arrayList.add(t);
            }
        }
        return arrayList;
    }

    /* JADX WARN: Type inference failed for: r0v4, types: [T, java.lang.Object] */
    @e
    public static final <T> T lastOrNull(@d List<? extends T> lastOrNull, @d Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(lastOrNull, "$this$lastOrNull");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        ListIterator<? extends T> listIterator = lastOrNull.listIterator(lastOrNull.size());
        while (listIterator.hasPrevious()) {
            T previous = listIterator.previous();
            if (predicate.invoke(previous).booleanValue()) {
                return previous;
            }
        }
        return null;
    }

    @d
    public static final <T, R> List<Pair<T, R>> zip(@d Iterable<? extends T> zip, @d R[] other) {
        Intrinsics.checkParameterIsNotNull(zip, "$this$zip");
        Intrinsics.checkParameterIsNotNull(other, "other");
        int length = other.length;
        ArrayList arrayList = new ArrayList(Math.min(CollectionsKt__IterablesKt.collectionSizeOrDefault(zip, 10), length));
        int i2 = 0;
        for (T t : zip) {
            if (i2 >= length) {
                break;
            }
            arrayList.add(TuplesKt.to(t, other[i2]));
            i2++;
        }
        return arrayList;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r2v1, types: [java.lang.Object] */
    public static final <T> T last(@d Iterable<? extends T> last, @d Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(last, "$this$last");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        T t = null;
        boolean z = false;
        for (T t2 : last) {
            if (predicate.invoke(t2).booleanValue()) {
                t = t2;
                z = true;
            }
        }
        if (z) {
            return t;
        }
        throw new NoSuchElementException("Collection contains no element matching the predicate.");
    }

    @d
    public static final <T> List<T> plus(@d Collection<? extends T> plus, @d T[] elements) {
        Intrinsics.checkParameterIsNotNull(plus, "$this$plus");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        ArrayList arrayList = new ArrayList(plus.size() + elements.length);
        arrayList.addAll(plus);
        CollectionsKt__MutableCollectionsKt.addAll(arrayList, elements);
        return arrayList;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r2v1, types: [java.lang.Object] */
    public static final <T> T single(@d Iterable<? extends T> single, @d Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(single, "$this$single");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        T t = null;
        boolean z = false;
        for (T t2 : single) {
            if (predicate.invoke(t2).booleanValue()) {
                if (z) {
                    throw new IllegalArgumentException("Collection contains more than one matching element.");
                }
                t = t2;
                z = true;
            }
        }
        if (z) {
            return t;
        }
        throw new NoSuchElementException("Collection contains no element matching the predicate.");
    }

    @d
    @SinceKotlin(version = "1.2")
    public static final <T, R> List<R> windowed(@d Iterable<? extends T> windowed, int i2, int i3, boolean z, @d Function1<? super List<? extends T>, ? extends R> transform) {
        int coerceAtMost;
        Intrinsics.checkParameterIsNotNull(windowed, "$this$windowed");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        SlidingWindowKt.checkWindowSizeStep(i2, i3);
        if ((windowed instanceof RandomAccess) && (windowed instanceof List)) {
            List list = (List) windowed;
            int size = list.size();
            int i4 = 0;
            ArrayList arrayList = new ArrayList((size / i3) + (size % i3 == 0 ? 0 : 1));
            MovingSubList movingSubList = new MovingSubList(list);
            while (i4 >= 0 && size > i4) {
                coerceAtMost = RangesKt___RangesKt.coerceAtMost(i2, size - i4);
                if (!z && coerceAtMost < i2) {
                    break;
                }
                movingSubList.move(i4, coerceAtMost + i4);
                arrayList.add(transform.invoke(movingSubList));
                i4 += i3;
            }
            return arrayList;
        }
        ArrayList arrayList2 = new ArrayList();
        Iterator windowedIterator = SlidingWindowKt.windowedIterator(windowed.iterator(), i2, i3, z, true);
        while (windowedIterator.hasNext()) {
            arrayList2.add(transform.invoke((List) windowedIterator.next()));
        }
        return arrayList2;
    }

    /* JADX WARN: Type inference failed for: r0v4, types: [T, java.lang.Object] */
    public static final <T> T last(@d List<? extends T> last, @d Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(last, "$this$last");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        ListIterator<? extends T> listIterator = last.listIterator(last.size());
        while (listIterator.hasPrevious()) {
            T previous = listIterator.previous();
            if (predicate.invoke(previous).booleanValue()) {
                return previous;
            }
        }
        throw new NoSuchElementException("List contains no element matching the predicate.");
    }

    @d
    public static final <T> List<T> minus(@d Iterable<? extends T> minus, @d Sequence<? extends T> elements) {
        HashSet hashSet;
        Intrinsics.checkParameterIsNotNull(minus, "$this$minus");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        hashSet = SequencesKt___SequencesKt.toHashSet(elements);
        if (hashSet.isEmpty()) {
            return toList(minus);
        }
        ArrayList arrayList = new ArrayList();
        for (T t : minus) {
            if (!hashSet.contains(t)) {
                arrayList.add(t);
            }
        }
        return arrayList;
    }

    @d
    public static final <T> List<T> plus(@d Iterable<? extends T> plus, @d Iterable<? extends T> elements) {
        Intrinsics.checkParameterIsNotNull(plus, "$this$plus");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        if (plus instanceof Collection) {
            return plus((Collection) plus, (Iterable) elements);
        }
        ArrayList arrayList = new ArrayList();
        CollectionsKt__MutableCollectionsKt.addAll(arrayList, plus);
        CollectionsKt__MutableCollectionsKt.addAll(arrayList, elements);
        return arrayList;
    }

    @d
    public static final <T, R> List<Pair<T, R>> zip(@d Iterable<? extends T> zip, @d Iterable<? extends R> other) {
        Intrinsics.checkParameterIsNotNull(zip, "$this$zip");
        Intrinsics.checkParameterIsNotNull(other, "other");
        Iterator<? extends T> it = zip.iterator();
        Iterator<? extends R> it2 = other.iterator();
        ArrayList arrayList = new ArrayList(Math.min(CollectionsKt__IterablesKt.collectionSizeOrDefault(zip, 10), CollectionsKt__IterablesKt.collectionSizeOrDefault(other, 10)));
        while (it.hasNext() && it2.hasNext()) {
            arrayList.add(TuplesKt.to(it.next(), it2.next()));
        }
        return arrayList;
    }

    @e
    public static final <T extends Comparable<? super T>> T max(@d Iterable<? extends T> max) {
        Intrinsics.checkParameterIsNotNull(max, "$this$max");
        Iterator<? extends T> it = max.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        while (it.hasNext()) {
            T next2 = it.next();
            if (next.compareTo(next2) < 0) {
                next = next2;
            }
        }
        return next;
    }

    @e
    public static <T extends Comparable<? super T>> T min(@d Iterable<? extends T> min) {
        Intrinsics.checkParameterIsNotNull(min, "$this$min");
        Iterator<? extends T> it = min.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        while (it.hasNext()) {
            T next2 = it.next();
            if (next.compareTo(next2) > 0) {
                next = next2;
            }
        }
        return next;
    }

    @d
    public static final <T> List<T> plus(@d Collection<? extends T> plus, @d Iterable<? extends T> elements) {
        Intrinsics.checkParameterIsNotNull(plus, "$this$plus");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        if (elements instanceof Collection) {
            Collection collection = (Collection) elements;
            ArrayList arrayList = new ArrayList(plus.size() + collection.size());
            arrayList.addAll(plus);
            arrayList.addAll(collection);
            return arrayList;
        }
        ArrayList arrayList2 = new ArrayList(plus);
        CollectionsKt__MutableCollectionsKt.addAll(arrayList2, elements);
        return arrayList2;
    }

    @d
    public static final <T> List<T> plus(@d Iterable<? extends T> plus, @d Sequence<? extends T> elements) {
        Intrinsics.checkParameterIsNotNull(plus, "$this$plus");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        ArrayList arrayList = new ArrayList();
        CollectionsKt__MutableCollectionsKt.addAll(arrayList, plus);
        CollectionsKt__MutableCollectionsKt.addAll(arrayList, elements);
        return arrayList;
    }

    @d
    public static final <T> List<T> plus(@d Collection<? extends T> plus, @d Sequence<? extends T> elements) {
        Intrinsics.checkParameterIsNotNull(plus, "$this$plus");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        ArrayList arrayList = new ArrayList(plus.size() + 10);
        arrayList.addAll(plus);
        CollectionsKt__MutableCollectionsKt.addAll(arrayList, elements);
        return arrayList;
    }
}
